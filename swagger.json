{
  "openapi": "3.0.0",
  "info": {
    "title": "Trua API",
    "version": "1.0",
    "contact": {
      "name": "Trua",
      "email": "support@Trua.com",
      "url": "https://Trua.com/"
    },
    "description": "# Introduction\nTrua is a modern platform offering a mix of screening, fraud, and compliance products designed to help you vet candidates ASAP. Our REST API utilizes predictable, resource-oriented URLs which are authenticated via a single API key and leverage JSON in all responses.\n\nFor more about Trua, visit [Trua.com](https://Trua.com/). If you're ready to start your integration, reach out to [support@Trua.com](mailto:support@Trua.com) to speak with our Enterprise Solutions team.\n\n\n# Getting Started\nTo start ordering reports with Trua, follow these steps\n\n1. [Get your accounts](#section/Getting-Started/Get-Your-Accounts)\n2. [Get your API keys](#section/Getting-Started/Get-Your-API-Keys)\n3. [Authenticate with Trua](#section/Getting-Started/Authenticate-With-Trua)\n4. [Order your first report](#section/Getting-Started/Order-Your-First-Report)\n5. [Listen for webhook events (optional)](#section/Using-Webhooks)\n6. [Get to know the report lifecycle](#section/Report-Lifecycle)\n\n\n## Get Your Accounts\nOur Enterprise Solutions team will work with you to create your accounts (one on our staging environment and one on production). For [platforms](#section/Platforms-and-Subaccounts), we'll also guide you through your subaccount setup. In order to credential your accounts, we'll need a few key pieces of information from you:\n\n**Legal Business Information**\n <br>The full legal name of your business and EIN as they appear on your government registration documents\n\n**Account Owner Contact Info**\n<br>The first/last name and email address for the person who'll be managing your Trua account\n\n**Permissible Purpose**\n<br>As a consumer reporting agency in the United States, Trua is regulated by federal, state, and local levels of government, primarily by the [Fair Credit Reporting Act (FCRA)](https://www.ftc.gov/enforcement/statutes/fair-credit-reporting-act). When requesting a consumer report on an individual, the FCRA requires that we collect from you a \"permissible purpose\", which is just a fancy way of saying: you need to have a specific, legally-protected reason for ordering consumer reports. \n\nHere are some examples\n- Employment: Includes the hiring, retention, reassignment, and/or promotion of employees (can apply to volunteers and interns as well)\n- Written Instructions of the Consumer: For contracting engagements or access to your platform\n\n**Desired Screenings**\n<br>Based on the types of screenings you'd like to run on your candidates, our team will create the appropriate [Packages](#tag/Packages) for your account.\n\nOnce you're up and running, you'll have access to the Trua API as well as the admin features at [app.Trua.com](https://app.Trua.com/) where you can use developer tools, manage reports, view metrics, etc. \n\n\n## Get Your API Keys\nOnce your staging and production accounts have been created, you'll have access to the Developer Tools section in Trua. You'll need to [create an API key](https://app.Trua.com/developer/api-keys) in each of your accounts, which you'll use to authenticate your requests in each environment. **Make sure to store your full API key somewhere secure** (like a password manager). For security reasons, the only time you'll see the full key displayed in Trua is right after you create it.\n\nRemember, anyone with access to your API keys can make API calls on your behalf. Therefore, we recommend these best practices to keep your API keys safe\n- Never embed API keys directly in code\n- Never store API keys in files inside your source code\n- Delete unused API keys\n- Periodically regenerate your API keys\n- Always encrypt your API keys\n- Restrict API key access to only those that need it\n- Never share your API keys, not even with us\n\nIf you believe your API key has been compromised, create a new API key and switch over to using that one, then delete your compromised API key.\n\n\n## Authenticate With Trua\nTrua uses HTTP API key authentication. To authenticate, include your [API key](https://app.Trua.com/developer/api-keys) in the header of all your API requests using the format \"Account {API_KEY}\" (with the word \"Account\" preceding your API key).\n\n#### Example Authenticated Request\n```sh\ncurl -X GET https://api.Trua.com/accounts \\\n    -H 'Authorization: Account [YOUR_API_KEY]' \\\n    -H 'Accept: application/json'\n```\n\n#### Example Authenticated Response\n```json\n[\n    {\n        \"id\": \"cc0df11d-a502-47ec-8aa1-ba0738030ca7\",\n        \"account_name\": \"Global Dynamics\",\n        \"first_name\": \"Nathan\",\n        \"last_name\": \"Stark\",\n        \"email_address\": \"nathan.stark@globaldynamics.com\",\n        \"url\": \"https://www.globaldynamics.com\",\n        \"tech_email_address\": \"it@globaldynamics.com\",\n        \"support_email_address\": \"support@globaldynamics.com\",\n        \"support_phone\": \"541-555-4376\",\n        \"actions_email_address\": \"hr@globaldynamics.com\",\n        \"compliance_email_address\": \"hr@globaldynamics.com\",\n        \"logo\": \"https://vignette.wikia.nocookie.net/eureka/images/d/dd/Global_dynamics.jpg\",\n        ...\n    },\n    ...\n]\n```\n\nIf you're seeing a similar response, you're authenticated and can make requests to our API.\n\n\n## Order Your First Report\nReports are the main resource you'll care about. They contain the findings for each candidate, whether you're running a background check, identity verification, or a more specialized screening like Social Media. That being said, there are some other resources which need to be in place before you can order a report.\n\n**[Candidates](#tag/Candidates)**\n<br>First off, you'll need to [create a candidate](#operation/createCandidate) with whom you'll associate the report. This is the person whose information we'll use when we run the report.\n\n**[Packages](#tag/Packages)**\n<br>Based on your business requirements, our team will choose the appropriate screenings and group them into packages for your account. Each time you order a report, you'll specify a package; this will determine the candidate information required for that report. For example, if you want to run a report with a package that includes a Motor Vehicle Record screening, we'll need the candidate's Driver's License Number and State.\n\n**[Reports With Invitations](#tag/Invitations)**\n<br>If you'd like Trua to invite your candidate to fill out their information in Trua's UI, [create an invitation](#operation/createInvitation) and we'll automatically create a corresponding report to go with it. Based on the package you specify, we'll generate a form where the candidate will fill out all the information required to run their report. Their invitation will include a link to their unique form.\n\n**[Reports Without Invitations](#tag/Reports)**\n<br>If you don't need Trua to send an invitation because you've embedded Trua's UI and you'd like your candidate to fill out their information as part of your in-app workflow, you can skip the invitation call and [create a report](#operation/postReport) instead. Once the report is created, you can grab the `apply` url from the metadata in the response and serve that up in your embedded view.\n\nAlternatively, if you'd like to provide all the candidate information _yourself_ (rather than asking the candidate to fill it in), you can [create a report](#operation/postReport) with the parameter `account_candidate_consented: true`. In your API call, you'll need to send along all the information required to run the report, based on the package you specify. _To order reports this way, you'll need this feature enabled for your account. Your organization will assume full legal responsibility for collecting the FCRA disclosure and consent agreements from each candidate._\n\n**Sample Redirect Flow**\n<br>To create a candidate, collect the candidate's information and `POST` it to our [/candidates](#operation/createCandidate) route. We'll return a candidate ID. Using the candidate `id` along with your account `id` and one of your package `id`s, `POST` this data to the [/reports](#operation/postReport) endpoint to order a new report. This will return the `apply` url in the metadata, which you can use to direct the candidate to their unique intake form.\n\nOnce the candidate fills out the form and submits disclosures, the report will begin processing.\n\n![alt text](https://Trua-assets.s3.amazonaws.com/how_to/Sample+Redirect+Flow.jpg)\n\n# Using Webhooks\n\n## Listen for Webhook Events\nTrua uses webhooks to publish events any time certain situations occur. You can subscribe to receive those events, allowing your application to react in real time. \n\nTo subscribe, use the [Webhooks](https://app.Trua.com/developer/webhooks) tool to register your URL to receive `POST` requests for your desired event type. Repeat for each event type you'd like to listen for.\n\n| Webhook event types | Publishes an event each time this occurs in your account  |\n|-|-|\n| candidate.created | a candidate is successfully created |\n| candidate.updated | a candidate is updated, e.g. name has changed |\n| candidate.deleted | a candidate is deleted |\n| candidate.consented | a candidate submits signed legal docs, including consent to a background check |\n| candidate.paid | a candidate successfully completes payment (only applies in scenarios where the candidate is responsible to pay for their report) |\n| transaction.created | a payment transaction is created |\n| transaction.updated | a payment transaction is updated |\n| transaction.deleted | a payment transaction is deleted |\n| invitation.created | an invitation (and its corresponding report) is successfully created |\n| invitation.updated | an invitation to a report is updated, e.g. an expired invitation is refreshed |\n| invitation.deleted | an invitation to a report is deleted |\n| report.created | a report is successfully created |\n| report.updated | a report is updated, e.g. the [report status](#section/Report-Lifecycle/Report-Statuses) has changed _Note: this is likely the most important event type to listen for, as it sends lots of important updates about each report_ |\n| report.completed | a report reaches one of the \"done\" [statuses](#section/Report-Lifecycle/Report-Statuses) _Note: if you don't want to be notified of every report update, but you want to know when each report is completed, you can listen for this event type instead of `report.updated`_ |\n| report.submitted | a report is submitted (the candidate provides all required data) |\n| report.deleted | a report is deleted |\n| monitor.created | a monitor is created |\n| monitor.updated | a monitor is updated |\n| monitor.deleted | a monitor is deleted |\n| monitor_record.created | a monitor returns a new record about one of your candidates |\n| monitor_record.updated | a monitor record is updated |\n| monitor_record.deleted | a record a monitor returned about one of your candidates is deleted |\n| account.updated | your account is updated |\n| sub_account.active | a subaccount is activated by the Trua team |\n\nHere's some more info about the [Webhooks resource](#tag/Webhooks)\n\n\n## Webhook Signing\nUsing Webhook Signing, you can ensure that requests sent to your application are from Trua and have not been tampered with.  You should use the webhook signature to avoid processing requests that are not from Trua and to protect your application from bad actors.\n\n### Enabling Webhook Signing\nTo enable webhook signatures, create an API key named `WEBHOOK_SIGNATURE` (see: [Get Your API Keys](#section/Getting-Started/Get-Your-API-Keys)). Make sure you copy the API key to a safe location before closing the modal, as it will not be visible again later. Trua will automatically use your `WEBHOOK_SIGNATURE` API key to sign the webhook payload using an SHA-256 HMAC hex digest. For platform accounts and any subaccounts, each one will each need their own `WEBHOOK_SIGNATURE` API key in order to receive the signature. \n\nYou'll use this API Key to generate your own HMAC hash against the payload you recieved to verify that \n1. The secret API key you generated was used to sign the request, proving it came from Trua\n2. The message payload has not been modified, protecting against man-in-the-middle attacks\n\n### How to validate webhooks\nThe HMAC hash value that Trua uses to sign your webhook will be included in the headers of the request as: `x-Trua-webhook-signature`\n\nYou'll use the`WEBHOOK_SIGNATURE` API key to generate an HMAC hash of the `body` of the request and validate the authenticity of that webhook.\n\nIf the value of `x-Trua-webhook-signature` is: a1342d29ce3b28c4416482f64a3e8b9f452a22755646d7ca9a553e654676b693</br>\nThen your app should also calculate the value as: a1342d29ce3b28c4416482f64a3e8b9f452a22755646d7ca9a553e654676b693\n\nAs long as those two values are equal, you should accept the request.  If they differ, your application should reject the webhook and stop processing.\n\nA verification function can be used to validate the `HMAC-SHA256` value using a crypto library of your choice, such as the Node.js `crypto` module. The function should calculate a hash using your `WEBHOOK_SIGNATURE` API key, and ensure that the result matches the hash sent by Trua.\n\n### Putting it all together\n#### Example Code\nThis is a simple Node.js example showcasing how to validate webhook signatures using Crypto libraries behind an Express server\n```\nconst crypto = require('crypto');\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.post('/', (req, res) => {\n    const SIGNATURE = req.get('x-Trua-webhook-signature');\n    const BODY = req.body;\n    console.log(BODY);\n\n    const HASH = crypto.createHmac('sha256', process.env.WEBHOOK_SIGNATURE).update(JSON.stringify(BODY)).digest('hex');\n\n    console.log(`This is the x-Trua-webhook-signature: ` + SIGNATURE);\n    console.log(`This is your application's calculated hash: ` + HASH);\n\n    // Respond with a 200, if you do not respond with a success code Trua will retry the request.\n    res.sendStatus(200);\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`)\n})\n```\n\n#### Example Output\n```\nExample app listening on port 3000\n{\n  id: '42eff0e4-9bca-45da-a143-2d4e1e271d88',\n  event: 'updated',\n  resource_id: 'efa32155-f8cb-4331-954c-11db22ae773d',\n  account_id: '16fab437-3ab5-4ee1-8a47-16ab41410a5e',\n  account_name: 'Example Account',\n  resource_type: 'report',\n  resource_url: 'https://api.Trua.com/reports/efa32155-f8cb-4331-954c-11db22ae773d',\n  status: 'processing',\n  timestamp: '2024-07-10T18:56:44Z'\n}\nThis is the x-Trua-webhook-signature: a1342d29ce3b28c4416482f64a3e8b9f452a22755646d7ca9a553e654676b693\nThis is your application's calculated hash: a1342d29ce3b28c4416482f64a3e8b9f452a22755646d7ca9a553e654676b693\n```\n\nThe function above uses an environment variable name `WEBHOOK_SIGNATURE` that contains the API key you created.\nThe app will extract the `body` from the request sent to the `/` endpoint and use the Node.js crypto library and your API key to create its own hex digest that should match the header included in the request.\n\nUsing a tool like ngrok, you can start this locally and receive calls from our API to your dev workstation to verify that webhook signing is working. _Note: Ask your security team before running port forwarding applications that expose your app to the internet!_\n\nAdditional sample webhook responses, POST bodies, and more are available in the [Webhooks resource](#tag/Webhooks) section.\n\n\n### Support\nIf your webhook signature has been lost or compromised, you can decommission it in [Trua](https://app.Trua.com/developer/api-keys/) and create a new one. Here are some [best practices](#section/Getting-Started/Get-Your-API-Keys) for keeping your keys safe. If your webhook signature isn't working, don't hesitate to reach out to [support@Trua.com](mailto:support@Trua.com).\n\n## Webhook Examples\n\n### Listening for `candidate.created` Webhook\nRegister a webhook for the `candidate.created` event type using the [Create Webhook Route](#operation/createAccountWebhookByAccountId). This webhook will be triggered when a new candidate is created.\n\n#### Example Create `candidate.created` Webhook Response\n```json\n{\n    \"id\": \"a87b1e1a-e9aa-4929-9f30-ad1f9b481a8c\",\n    \"url\": \"https://www.yourcompany.com/webhooks/candidate_created\",\n    \"webhook_type\": \"candidate.created\"\n}\n```\n\n#### Example `candidate.created` Webhook `POST` body\n```json\n{\n  \"id\": \"dcd9a3db-d885-4695-8a92-5556126000c5\",\n  \"event\": \"created\",\n  \"resource_id\": \"67cae505-0bac-4eaf-a255-95421d04e303\",\n  \"account_id\": \"e829bc40-89eb-4054-94e3-7e826373f8ec\",\n  \"account_name\": \"Venture Industries\",\n  \"resource_type\": \"candidate\",\n  \"resource_url\": \"https://api.Trua.com/candidates/67cae505-0bac-4eaf-a255-95421d04e303\"\n}\n```\nNow that the webhook was triggered, you should receive the response body presented above. You can use this to get the candidate ID from the `resource_url` key.\n\n\n\n### Listening for `report.created` Webhook\nLet's say you also want to be notified each time a report is created. To do so, you can register for the `report.created` event type.\n\n#### Example Create `report.created` Webhook Request\n```sh\ncurl -X POST https://api.Trua.com/accounts/[YOUR_ACCOUNT_ID]/webhooks \\\n    -H 'Authorization: Account [YOUR_API_KEY]' \\\n    -H 'Accept: application/json'\n    -H 'Content-Type: application/json' \\\n    --data-raw '{\n        \"webhook_type_id\": \"48a9b600-e7ff-4039-bcb2-04cddab97ba8\",\n        \"url\": \"https://www.yourcompany.com/webhooks/report_created\"\n    }'\n```\n\nAgain, you would create a webhook for `report.created`.\n\n#### Example Create `report.created` Webhook Response\n```json\n{\n    \"id\": \"89ade71a-e9aa-4929-9f30-ad1f93245abf\",\n    \"url\": \"https://www.yourcompany.com/webhooks/report_created\",\n    \"enabled\": true,\n    \"webhook_type\": \"report.created\",\n    \"webhook_description\": \"A report has been created.\"\n}\n```\n\nAnd once a report is created, you will be sent this\n\n#### Example `report.created` Webhook `POST` body\n```json\n{\n  \"id\": \"e7331072-7865-4dca-9cd2-1643656a84c7\",\n  \"event\": \"created\",\n  \"resource_id\": \"e7e0b119-7714-44a2-900e-9b98a4e5b1c6\",\n  \"account_id\": \"e829bc40-89eb-4054-94e3-7e826373f8ec\",\n  \"account_name\": \"Venture Industries\",\n  \"resource_type\": \"report\",\n  \"resource_url\": \"https://api.Trua.com/reports/e7e0b119-7714-44a2-900e-9b98a4e5b1c6\"\n}\n```\n\n# Report Lifecycle\nFrom creation to completion, each report has the potential to go down a few different paths. The best way to know the current state of any given report is by checking its status. If you've opted to use an invitation with your report, the invitation also has a status. The happiest path is when no records are found on the candidate and the report sails through to a `clear` status. But since that's not always the case, we want to help you understand what else can happen.\n\n<br>[Invitation Statuses](#section/Report-Lifecycle/Invitation-Statuses)\n<br>[Report Statuses](#section/Report-Lifecycle/Report-Statuses)\n<br>[Disputes](#section/Report-Lifecycle/Disputes)\n<br>[Adverse Action](#section/Report-Lifecycle/Adverse-Action)\n\n## Invitation Statuses\n| Status | Description |\n|-|-|\n| invite_sent | The invitation sent successfully, but the candidate hasn't taken action yet |\n| viewed | The candidate viewed the invitation, but hasn't clicked through to the form yet |\n| clicked | The candidate clicked the invitation link, but hasn't completed the intake form |\n| completed | The candidate submitted the intake form and the report will begin processing |\n| canceled | The invitation (and its corresponding report) was canceled, preventing the candidate from accessing the form |\n| expired | The invitation expired, preventing the candidate from accessing the form |\n\nHere's some more info about the [Invitations resource](#tag/Invitations)\n\n\n## Report Statuses\nThere are many different statuses a candidate's report can be in. Here, we've grouped the statuses to illustrate what they mean in relation to the report's progress. The detailed descriptions of each status are below. \n\n| Not Started | Moving Along | Paused | Action Needed | Done |\n|-|-|-|-|-|\n| Created<br>Expired | Queued<br>Processing<br>Pending<br>Pre-Adverse<br>Approved To Process | Info Requested<br>Dispute<br>Pending Approval<br>YS QA Review<br>Exception | Consider | Clear<br>Proceed<br>Final Adverse<br>Canceled<br>Pass<br>Fail |\n\n| Status | Description |\n|-|-|\n| created | The report was successfully created and is ready to receive candidate information/consent |\n| expired | The report was created, but didn't receive candidate information/consent before its invitation's expiration date. An expired report can be reopened by [refreshing its invitation](#operation/refreshInvitationById). For more about expiration and how to customize, see [Invitations](#tag/Invitations). |\n| queued | The report is waiting for the next screening to start processing |\n| processing | Our verifications team is processing the report |\n| pending | We're waiting on a response from a third party (e.g. a court runner is retrieving records for a County Criminal check) |\n| pre_adverse | In response to the report being in `consider` status, one of your admins decided to kick off the [Adverse Action](#section/Report-Lifecycle/Adverse-Action) process|\n| approved_to_process | On reports where the candidate is a minor, this indicates that their guardian provided consent for us to process their report |\n| info_requested | The candidate information we received wasn't sufficient to run the report. We've asked the candidate to provide the information we need and are waiting for their response. |\n| dispute | The candidate has filed a dispute regarding the accuracy or completeness of the results in their report. Our verifications team is investigating. |\n| pending_approval | On reports where the candidate is a minor, this indicates that we're waiting for their guardian to provide consent for us to process the report |\n| ys_qa_review | If you've opted for us to manage the [Adverse Action](#section/Report-Lifecycle/Adverse-Action) process for you, this indicates that results have been added to the report which may disqualify the candidate. Our verifications team is reviewing and will decide next steps based on your adjudication matrix. |\n| exception | There is an issue with the report data (e.g. SSN is incorrect) that is preventing the report from processing. Our verifications team will contact the candidate for the correct information. |\n| consider | Results have been added to the report which may disqualify the candidate. One of your admins needs to review and decide whether to set the report to `proceed` or kick off the [Adverse Action](#section/Report-Lifecycle/Adverse-Action) process. |\n| clear | The report has finished processing and no disqualifying results were found |\n| proceed | In response to the report being in `consider` status, one of your admins decided to set the report to `proceed`, indicating that the results found do not disqualify the candidate |\n| final_adverse | The [Adverse Action](#section/Report-Lifecycle/Adverse-Action) process is complete and it has been determined that the results found disqualify the candidate |\n| canceled | The report was canceled and no decision has been made about the candidate. No additional activity will occur on this report. |\n| pass | On reports where there are exclusively pass/fail outcomes (e.g. reports with Identity Verification and no additional screenings), `pass` indicates a positive \"done\" state |\n| fail | On reports where there are exclusively pass/fail outcomes (e.g. reports with Identity Verification and no additional screenings), `fail` indicates a negative \"done\" state |\n\nHere's some more info about the [Reports resource](#tag/Reports)\n\n## Disputes\nConsolidating data from several sources into a report is a complex process that can sometimes lead to unintended discrepancies between the collected information and what the consumer (i.e. candidate) knows or believes to be true. This is why the FCRA provides consumers a mechanism to dispute inaccuracies. As a consumer reporting agency, Trua has an obligation to provide accurate reports. When a candidate logs a dispute, we take action right away to determine whether the dispute is frivolous or if a correction to the report is necessary. We take this obligation seriously and have established internal processes to appropriately investigate, respond to, and resolve disputes in a timely manner. No action from you is needed during the dispute process.\n\n## Adverse Action\nWhen our findings include results which may disqualify the candidate, we set the [report status](#section/Report-Lifecycle/Report-Statuses) to `consider`. This gives your organization the opportunity to review the report and decide whether the candidate will `proceed` in your process or not. If you determine that they've been disqualified, [create an adverse action](#operation/createAAReportById) (via the Trua UI or API) and specify which violations factored into your decision. This will set the report status to `pre-adverse` and kick off the FCRA-required legal process called \"Adverse Action\".\n\nAdverse Action offers the candidate the opportunity to understand exactly which results disqualified them. When the adverse action is created, Trua will send the candidate an email containing all the FCRA-required information, including the violations you specified. The candidate will then have a set number of days (based on your account notifications setting) during which they may respond to you and provide additional information about themselves for you to consider. If you have your own process for completing an \"individualized assessment\", you'll want to complete that within this timeframe. _The minimum number of days prescribed by the FCRA is 7, but you can [set it higher](https://app.Trua.com/settings/general)._\n\nIf you change your mind during this time, you can [cancel the adverse action](#operation/cancelAAReportById) (via the Trua UI or API), which will automatically move the report to the next stage. If you take no action, when the timeframe elapses the report will automatically be completed with a `final adverse` status and Trua will notify the candidate as such.\n\nHere's some more info about the [Adverse Actions resource](#operation/createAAReportById)\n\n\n### How do I know if the `violations` parameter is required?\nIn the response of the [Get a Report Route](#operation/getReportById), you'll have the `adverse_action_settings` key. Within is the `mandatory_selection_of_violations` key, which tells you whether or not you need to select violations when creating a new adverse action (most often, you do).\n\n````\n  adverse_action_settings: {\n    \"mandatory_selection_of_violations\": true\n  }\n````\n\n### Which violations can I send?\nIn the response of the [Get a Report Route](#operation/getReportById), you'll have the `report_screenings` key, which is an array. For each report screening, you'll have an array of `records`, and inside each `record` you'll have an array of `violations`. (A record may not have violations. For example, a `clear` report probably won't have any violations.)\n\nFor each violation, you'll have a `description` and possibly a `disposition` and `disposition_date`.\n\nYou can map all the violations and select the ones you want to use for the adverse action.\n\n#### Example of a full report response\n\n````json\n{\n    \"id\": \"2ee83662-ea17-4233-95b9-288ee3fcb9ff\",\n    \"reference_id\": null,\n    \"candidate_id\": \"66bdcd96-adf8-4b8a-b599-ea0040a11b79\",\n    \"status\": \"consider\",\n    \"response_status\": null,\n    \"submitted_at\": \"2021-04-26T22:33:18.269Z\",\n    \"completed_at\": \"2021-04-30T15:44:24.333Z\",\n    \"created_at\": \"2021-04-26T21:51:06.880Z\",\n    \"decision\": \"\",\n    \"usage_amount\": null,\n    \"process_sequentially\": true,\n    \"created_by\": \"cool_email@Trua.com\",\n    \"permissible_purpose\": {\n        \"id\": \"a2c00755-b57e-40e1-9876-2c5640ce53be\",\n        \"name\": \"Employment\",\n        \"configurations\": { \"initial_status\": \"pre_adverse\" }\n      }\n    },\n    \"candidate\": {\n        \"id\": \"66bdcd96-adf8-4b8a-b599-ea0040a11b79\",\n        \"full_name\": \"John Clean\",\n        \"email\": \"cool_email@Trua.com\",\n        \"phone_masked\": null,\n        \"date_of_birth_masked\": \"#######-12\",\n        \"ssn_masked\": null,\n        \"driver_license_number_masked\": null,\n        \"full_address\": {\n            \"address\": \"Mineapolis\",\n            \"zip_code\": \"12345\",\n            \"city\": \"Mineapolis\",\n            \"state\": \"MN\"\n        },\n    },\n    \"account_id\": \"d210dcdd-c9d4-4ced-a594-8402cb6a2ab4\",\n    \"account_name\": \"Account Name\",\n    \"report_url\": null,\n    \"adverse_action_id\": null,\n    \"report_screenings\": [\n        {\n            \"id\": \"e11b7d00-9b55-4879-8f6e-c3859f16347d\",\n            \"type\": \"Criminal\",\n            \"label\": \"CountyCriminal\",\n            \"name\": \"CountyCriminal\",\n            \"status\": \"consider\",\n            \"order\": 0,\n            \"decision\": \"Consider\",\n            \"response_status\": \"ready\",\n            \"created_at\": \"2021-04-26T22:33:18.218Z\",\n            \"report_url\": \"\",\n            \"elapsed_timing\": \"1 week\",\n            \"records\": [\n                {\n                    \"category\": {\n                        \"key\": \"County\",\n                        \"value\": \"NY-NYOCA\"\n                    },\n                    \"messages\": [],\n                    \"violations\": [],\n                    \"personal_data\": {},\n                    \"other_information\": {\n                        \"jurisdiction\": \"NY-NYOCA\",\n                        \"pending_notes\": null\n                    }\n                }\n            ],\n            \"comments\": []\n        },\n        {\n            \"id\": \"c6851635-9ce4-47ce-a246-531fbe36aac0\",\n            \"type\": \"Criminal\",\n            \"label\": \"StateCriminalCourt\",\n            \"name\": \"StateCriminalCourt\",\n            \"status\": \"consider\",\n            \"order\": 0,\n            \"decision\": \"Consider\",\n            \"response_status\": \"ready\",\n            \"created_at\": \"2021-04-26T22:33:18.228Z\",\n            \"report_url\": \"\",\n            \"elapsed_timing\": \"1 week\",\n            \"records\": [\n                {\n                    \"category\": {\n                        \"key\": \"State\",\n                        \"value\": \"NEW YORK\"\n                    },\n                    \"messages\": [],\n                    \"violations\": [\n                        {\n                            \"comments\": null,\n                            \"sentence\": \"24 Months Or Pretrial Intervention Next Court Date 01/01/2021\",\n                            \"file_date\": \"2021-03-20\",\n                            \"case_number\": \"ABCDEFG\",\n                            \"description\": \"Felony\",\n                            \"disposition\": \"Court: Pre Trial Intervention\",\n                            \"jurisdiction\": \"NEW YORK\",\n                            \"offense_date\": null,\n                            \"count_offense\": \"1. Possession Of Schedule 4 Substance\",\n                            \"dob_on_record\": \"XXXX-04-01\",\n                            \"ssn_on_record\": null,\n                            \"name_on_record\": \"MESS, HANK\",\n                            \"disposition_date\": \"2021-03-20\"\n                        },\n                        {\n                            \"description\": \"This one Has Only the description\",\n                        }\n                    ],\n                    \"personal_data\": {},\n                    \"other_information\": {\n                        \"jurisdiction\": \"NEW YORK\",\n                        \"pending_notes\": null\n                    }\n                },\n                {\n                    \"category\": {\n                        \"key\": \"State\",\n                        \"value\": \"MINNESOTA\"\n                    },\n                    \"messages\": [],\n                    \"violations\": [\n                        {\n                            \"comments\": null,\n                            \"sentence\": \"24 Months Or Pretrial Intervention Next Court Date 10/08/2015\",\n                            \"file_date\": \"2014-08-20\",\n                            \"case_number\": \"POIUYTREWQ\",\n                            \"description\": \"Felony\",\n                            \"disposition\": \"Court: Pre Trial Intervention\",\n                            \"jurisdiction\": \"MINNESOTA\",\n                            \"offense_date\": null,\n                            \"count_offense\": \"1. Possession Of Schedule 4 Substance\",\n                            \"dob_on_record\": \"XXXX-04-01\",\n                            \"ssn_on_record\": null,\n                            \"name_on_record\": \"MESS, HANK\",\n                            \"disposition_date\": \"2015-09-18\"\n                        },\n                        {\n                            \"comments\": null,\n                            \"sentence\": \"24 Months Or Pretrial Intervention Next Court Date 10/08/2015\",\n                            \"file_date\": \"2014-08-20\",\n                            \"case_number\": \"502008CF012155YXYXMB\",\n                            \"description\": \"Felony\",\n                            \"disposition\": \"Court: Pre Trial Intervention\",\n                            \"jurisdiction\": \"MINNESOTA\",\n                            \"offense_date\": null,\n                            \"count_offense\": \"2. Possession Of Schedule 2 Substance\",\n                            \"dob_on_record\": \"XXXX-04-01\",\n                            \"ssn_on_record\": null,\n                            \"name_on_record\": \"MESS, HANK\",\n                            \"disposition_date\": \"2014-09-18\"\n                        },\n                        ...\n                    ],\n                    \"personal_data\": {},\n                    \"other_information\": {\n                        \"jurisdiction\": \"MINNESOTA\",\n                        \"pending_notes\": null\n                    }\n                }\n            ],\n            \"comments\": []\n        }\n    ],\n    \"report_screenings_total\": 2,\n    \"report_screenings_completed\": 2,\n    \"elapsed_timing\": \"4 days\",\n    \"package_name\": \"State Criminal Court\",\n    \"comments\": [],\n    \"course\": {\n        \"has_courses\": false,\n        \"courses_completed\": false\n    },\n    \"meta\": {\n        \"entity\": \"https://app.Trua.com/reports/1234....\",\n        \"apply\": \"https://profile.Trua.com/candidates/1234\n    },\n    \"adverse_action_settings\": {\n        \"mandatory_selection_of_violations\": false\n    }\n}\n````\n\n\n# Platforms and Subaccounts\nIf you're going to be operating as a platform account in Trua (where your customers will have their own Trua subaccounts \"underneath\" yours and _they'll_ be the ones ordering reports), this section is for you. _To manage subaccounts, you'll need this feature enabled for your account._ \n\nAs a platform account, in your Trua [account settings](https://app.Trua.com/settings/account), you can add your logo and brand colors, which will alter the look of Trua for your subaccount admins.\n\n## Creating Subaccounts\nJust like your own account, when you [create a subaccount](#operation/createSubaccount) to represent one of your customers, you'll need to specify a permissible purpose and at least one package. Your subaccounts must use a subset of the permissible purposes and packages associated with your platform account. You'll also need to provide the credentialing information highlighted in the [Get Your Accounts](#section/Getting-Started/Get-Your-Accounts) section.\n\n**Permissible Purposes**\n<br>To see a list of your platform account's permissible purposes, check the [Get Account Route](#operation/getAccountById). The response body will have an array of `permissible_purposes` with an id for each. When you create a subaccount, you'll provide the `permissible_purpose_id` for each permissible purpose you want the subaccount to be able to use.\n\n**Packages**\n<br>Similarly, to see a list of your platform account's packages, check the [Get Packages Route](#operation/getPackages). The response body will have an array of `account_packages` with an id for each. When you create a subaccount, you'll provide an `account_packages` array with the `id` for each package you want the subaccount to be able to use. This will automatically create those packages within the subaccount, using the same configurations as the platform account.\n\nInside the `account_packages` array, your objects must follow this format:\n- id: the platform account package id\n- name: the name of the subaccount package (if not provided, this will inherit the name of the platform account package)\n- paid_by: defines who will pay for the report, with the possible options of `account` or `candidate` (if not provided, this will inherit the platform account package's setting) _Note: if set to `candidate`, the candidate will be asked to provide their credit card information in a payment form. Their report won't start processing until we've successfully received their payment._\n\nHow to provide the `account_packages` parameter\n\n  ```\n    \"account_packages\": [\n        {\n            \"id\": \"the UUID of one of the platform account packages\",\n            \"name\": \"the name of the subaccount package\",\n            \"paid_by\": \"candidate\"\n        },\n        {\n            \"id\": \"the UUID of one of the platform account packages\",\n            \"name\": \"if not provided, will inherit the platform account package's name\",\n            \"paid_by\": \"account\"\n        }\n    ]\n  ```\n\n**Subaccount Owner**\n<br>The subaccount owner will be set based on the `email_address` you provide when you create the subaccount. The owner will be responsible for signing legal documents and completing their subaccount setup in Trua.\n\nHere's some more info about the [Subaccounts Resource](#tag/Subaccounts)\n\n## Credentialing Subaccounts\nOnce the subaccount is created, Trua will send an email to the subaccount owner with a link to sign into Trua, where they'll be prompted to create their user account and sign applicable legal documents. Our onboarding team will review everything, and once it all looks good, they'll mark the subaccount `credentialed`. We'll notify the subaccount owner that they now have full access to Trua and can complete any additional setup, e.g. adding their brand settings, customizing their notifications, and inviting additional admin users.\n\n_Note: The API key generated when the subaccount is created won't be active until the subaccount is `credentialed`._ Once the API key is active, you can use it to manage Trua resources via the API. To get notified when your subaccounts become `credentialed`, [subscribe](#section/Using-Webhooks) to the `sub_account.active` webhook event type.\n\n#### Example Create `sub_account.active` Webhook Request\n```sh\ncurl -X POST https://api.Trua.com/accounts/[YOUR_ACCOUNT_ID]/webhooks \\\n    -H 'Authorization: Account [YOUR_API_KEY]' \\\n    -H 'Accept: application/json'\n    -H 'Content-Type: application/json' \\\n    --data-raw '{\n        \"webhook_type_id\": \"48a9b600-e7ff-4039-bcb2-04cddab97ba8\",\n        \"url\": \"https://www.yourcompany.com/webhooks/sub_account_active\"\n    }'\n```\n\n#### Example Create `sub_account.active` Webhook Response\n```json\n{\n    \"id\": \"89ade71a-e9aa-4929-9f30-ad1f93245abf\",\n    \"url\": \"https://www.yourcompany.com/webhooks/report_completed\",\n    \"enabled\": true,\n    \"webhook_type\": \"sub_account.active\",\n    \"webhook_description\": \"A subaccount has been activated by Trua support.\"\n}\n```\n\n#### Example `sub_account.active` Webhook `POST` body\n```json\n{\n  \"id\": \"ca64ad1a-2018-41c4-b369-dd5c3c1581dc\",\n  \"event\": \"active\",\n  \"resource_id\": \"21e2830c-b886-4234-a31d-5fa316069b21\",\n  \"account_id\": \"e829bc40-89eb-4054-943-7e826373f8ec\",\n  \"account_name\": \"Venture Capital\",\n  \"resource_type\": \"sub_account\",\n  \"resource_url\": \"https://api.Trua.com/accounts/21e2830c-b88e-42e-a5ed-5e316069b21\"\n}\n```\n\n\n# Pagination\nAll top-level API resources have support for bulk fetches via `list` API methods. Trua uses page-based\npagination via the `page` and `per_page` parameters. For example, you can list invitations, candidates, and reports.\n\n\n## Standard Request\n#### Example Paginated Request\n```sh\ncurl -X GET https://api.Trua.com/invitations?page=2&per_page=25 \\\n    -H 'Authorization: Account [YOUR_API_KEY]' \\\n    -H 'Accept: application/json'\n```\n#### Paginated `list` API Request Parameters\n\n<table>\n    <tr>\n        <th>Parameter</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>page</code></td>\n        <td>\n            The page number to retrieve.<br />\n            <b>type</b>: <code>integer</code><br />\n            <b>default</b>: <code>1</code>\n        </td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>per_page</code></td>\n        <td>\n            The number of records per page.<br />\n            <b>type</b>: <code>integer</code><br />\n            <b>default</b>: <code>50</code><br />\n            <b>minimum</b>: <code>1</code><br />\n            <b>maximum</b>: <code>200</code>\n        </td>\n    </tr>\n</table>\n\nThe `page` parameter determines which page of results will be returned in the response, and defaults to `1` if not\nset or set to an invalid type. If the value of `page` exceeds the total_number of pages available, the response will include an empty data array.\n\nThe `per_page` parameter determines the maximum number of results included in each response. The maximum value\nallowed is 200, with a default value of 50.\n\n* If there are fewer resources available than the `per_page` value, the response will include all available resources.\n* If you pass more than 200, the response will still include only 200.\n* If the `per_page` value is an invalid type, the default value of 50 is used.\n\n## Standard Response\n#### Paginated `list` API Response Structure\n<PullRight>\n\n#### Example Paginated Response\n```sh\n{\n    \"object\": \"list\",\n    \"meta\": {\n        \"page\": 2,\n        \"per_page\": 25,\n        \"total_count\": 137,\n        \"total_pages\": 6\n    },\n    \"data\": [\n        {\n            \"object\": \"invitation\",\n            \"id\": \"18e00b78-e620-4ecf-a01a-eb810f1b6751\",\n            ... additional response attributes based on resource schema\n        },\n        {\n            \"object\": \"invitation\",\n            \"id\": \"d0102680-e2de-4af8-9034-f88ccb4ad267\",\n            ... additional response attributes based on resource schema\n        },\n        ... additional resources in the page\n    ]\n}\n```\n</PullRight>\n\nThe standard response for all top-level `list` API requests will include at least these attributes\n\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>object</code></td>\n        <td>\n            The type of object returned.<br />\n            <b>type</b>: <code>string</code><br />\n            <b>default</b>: <code>\"list\"</code>\n        </td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>meta</code></td>\n        <td>\n            Metadata associated with the response.<br />\n            <b>Attributes</b>:<br />\n            <table style=\"margin: 0; display: inline-table\">\n                <tr>\n                    <th>Attribute</th>\n                    <th>Description</th>\n                </tr>\n                <tr>\n                    <td style=\"vertical-align: top\"><code>page</code></td>\n                    <td>\n                        The page number of the response.<br />\n                        <b>type</b>: <code>integer</code><br />\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"vertical-align: top\"><code>per_page</code></td>\n                    <td>\n                        The number of results per page.<br />\n                        <b>type</b>: <code>integer</code><br />\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"vertical-align: top\"><code>total_count</code></td>\n                    <td>\n                        The total number of resources available.<br />\n                        <b>type</b>: <code>integer</code><br />\n                    </td>\n                </tr>\n                <tr>\n                    <td style=\"vertical-align: top\"><code>total_pages</code></td>\n                    <td>\n                        The total number of pages available.<br />\n                        <b>type</b>: <code>integer</code><br />\n                    </td>\n                </tr>\n            </table>\n        </td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>data</code></td>\n        <td>\n            An array of the requested resources.<br />\n            <b>type</b>: <code>array</code><br />\n            <b>Notes</b>: May be an empty array <code>[]</code> if no resources are available.<br />\n        </td>\n    </tr>\n</table>\n\n# Filter and Sort\nFor all listing endpoints, we support a filtering query param called `query` that allows you to pass a field name and a matcher to use to filter the results down a specific set. We\nalso support two query params called `order_by` and `order` that let you pass the field name you want to order by, and the direction you want the results ordered.  When combined with\n[Pagination](#section/Pagination), this allows you to build a custom UI for listing out resources.\n\n\n## Filtering\n<table>\n    <tr>\n        <th>Parameter</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>query</code></td>\n        <td>\n            Field name to filter on.<br />\n            <b>type</b>: <code>string</code><br />\n        </td>\n    </tr>\n</table>\n\n#### Get only reports created before Jan 1 2021\n```sh\ncurl -g -X GET \\\n  'https://api.Trua.com/reports?query[created_at_lt]=2022-01-01' \\\n  -H 'Authorization: Account [YOUR_API_KEY]' \\\n  -H 'Accept: application/json'\n```\n\n#### Get only reports updated after Jan 1 2021\n```\ncurl -g -X GET \\\n  'https://api.Trua.com/reports?query[updated_at_gteq]=2022-01-01T00:00:00.000Z'\n  -H 'Authorization: Account [YOUR_API_KEY]' \\\n  -H 'Accept: application/json'\n```\n\n#### Get reports created between March 23 2021 and April 1 2021\n```\ncurl -g -X GET \\\n  'https://api.Trua.com/reports?query[created_at_lt]=2021-04-01&query[created_at_gt]=2021-03-23' \\\n  -H 'Authorization: Account [YOUR_API_KEY]' \\\n  -H 'Accept: application/json'\n```\n\n#### Matchers\n<table>\n    <tr>\n        <th>Predicates</th>\n        <th>Description</th>\n        <th>Notes</th>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_eq</code></td>\n        <td>Equal</td>\n        <td>\n          <code>query[status_eq]=created</code><br />\n\t  Individual check, to do multiple see <code>*_in</code>\n        </td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_not_eq</code></td>\n        <td>Not equal</td>\n        <td>\n          <code>query[status_not_eq]=created</code><br />\n\t  Individual check, to do multiple see <code>*_not_in<code>\n        </td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_lt</code></td>\n        <td>Less than</td>\n        <td><code>query[created_at_lt]=2022-01-01</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_lteq</code></td>\n        <td>Less than or equal to</td>\n        <td><code>query[created_at_lteq]=2022-01-01</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_gt</code></td>\n        <td>Greater than</td>\n        <td><code>query[created_at_gt]=2022-01-01</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_gteq</code></td>\n        <td>Greater than or equal to</td>\n        <td><code>query[created_at_gteq]=2022-01-01</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_null</code></td>\n        <td>Is null</td>\n        <td><code>query[completed_at_null]=true</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_not_null</code></td>\n        <td>Is not null</td>\n        <td><code>query[completed_at_not_null]=true</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_in</code></td>\n        <td>Match any value in array</td>\n        <td><code>query[status_in][]=clear&query[status_in][]=consider</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_not_in</code></td>\n        <td>Match none of the values in array</td>\n        <td><code>query[status_not_in][]=clear&query[status_not_in][]=consider</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_start</code></td>\n        <td>Starts with</td>\n        <td><code>query[status_start]=con</code></td>\n    </tr>\n    <tr>\n        <td nowrap style=\"vertical-align: top\"><code>*_not_start</code></td>\n        <td>Does not start with</td>\n        <td><code>query[status_not_start]=con</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_end</code></td>\n        <td>Ends with</td>\n        <td><code>query[status_end]=sider</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_not_end</code></td>\n        <td>Does not end with</td>\n        <td><code>query[status_not_end]=sider</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_cont</code></td>\n        <td>Contains</td>\n        <td><code>query[status_cont]=con</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_not_cont</code></td>\n        <td>Does not contain</td>\n        <td><code>query[status_not_cont]=con</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_true</code></td>\n        <td>Is true</td>\n        <td><code>query[active_true]=true</code></td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>*_false</code></td>\n        <td>Is false</td>\n        <td><code>query[active_false]=true</code></td>\n    </tr>\n</table>\n\n## Sorting\n<table>\n    <tr>\n        <th>Parameter</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>order_by</code></td>\n        <td>\n            Field name to sort on.<br />\n            <b>type</b>: <code>string</code><br />\n        </td>\n    </tr>\n    <tr>\n        <td style=\"vertical-align: top\"><code>order</code></td>\n        <td>\n            Specifies the direction to sort.<br />\n            Accepts <code>asc</code> and <code>desc</code>. <br />\n            Defaults to <code>asc</code> when not passed<br />\n            <b>type</b>: <code>string</code><br />\n        </td>\n    </tr>\n</table>\n\n#### Order candidates by `created_at` in default ascending order (oldest first)\n```\ncurl -g -X GET \\\n  'https://api.Trua.com/reports?order_by=created_at\n  -H 'Authorization: Account [YOUR_API_KEY]' \\\n  -H 'Accept: application/json'\n```\n\n#### Order candidates by `updated_at` in descending order (newest first)\n```\ncurl -g -X GET \\\n  'https://api.Trua.com/reports?order_by=updated_at&order=desc\n  -H 'Authorization: Account [YOUR_API_KEY]' \\\n  -H 'Accept: application/json'\n```\n\n#### Combine it all together\nYou can use pagination, querying and ordering all on the same call to fully control the results.\nThis will get all reports created between March 23, 2021 and April 1, 2021 and order them by the `created_at` field with newest first while limiting the results to 20 per page.\n```\ncurl -g -X GET \\\n  'https://api.Trua.com/reports?query[created_at_lt]=2021-04-01&query[created_at_gt]=2021-03-23&order_by=created_at&order=desc&page=1&per_page=20' \\\n  -H 'Authorization: Account [YOUR_API_KEY]' \\\n  -H 'Accept: application/json'\n```\n\n# Errors\n\nWe return a number of standard [HTTP errors](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status). Below are some of the most common errors that you may run into while developing.\n\n\n| Status | Definition |\n|-|-|\n| 400 | Bad Request |\n| 401 | Unauthorized |\n| 403 | Forbidden |\n| 404 | Not Found |\n| 422 | Unprocessable Entity |\n| 500 | Internal Server Error |\n\n\nBelow are the status codes with more information on what could have occurred.\n\n\n## Bad Request\n\nThe server cannot process the request. This error is most likely due to malformed request syntax.\n\n- code: `400`\n- status: `Bad Request`\n\n<RedocResponse  pointer={\"#/components/responses/BadRequest\"} />\n\n\n## Unauthorized\n\nSimilar to a `403 Forbidden`, but specifically when authentication is provided and has failed, or not been provided.\n\nThis error is most likely due to not including  or having a malformed API key in the request header.\n\n- code: `401`\n- status: `Unauthorized`\n\n<RedocResponse  pointer={\"#/components/responses/Unauthorized\"} />\n\n\n## Forbidden\n\nThe request is valid, but you are unable to execute the request. This error is most likely due to the API key not having the necessary permissions, or a prohibited action is attempted, such as creating a duplicate record where one already exists.\n\n- code: `403`\n- status: `Forbidden`\n\n<RedocResponse  pointer={\"#/components/responses/Forbidden\"} />\n\n\n## Not Found\n\nThe requested resource could not be found but may be available in the future. This error is often encountered when an `id` that does not exist is passed in a request. If you encounter this error, ensure that you are referencing the correct `id` and that it exists in your account.\n\n- code: `404`\n- status: `Not Found`\n\n<PullRight>\n```json\n{\n  {\n    \"title\": \"Report Not Found\",\n    \"detail\": \"The report was not found\",\n    \"meta\": {\n      \"report_id\": \"INVALID_REPORT_ID\"\n     },\n    \"src\": {},\n    \"status\": 404\n  }\n}\n```\n</pullRight>\n\n## Unprocessable Entity\n\nThe request was well-formed, but was unable to be processed due to semantic errors. This error is most likely due to including invalid data in `POST`, `PATCH`, and `PUT` requests. Refer to the request documentation to ensure you are supplying the required attributes, and that the attribute types are correct.\n\n- code: `422`\n- status: `Unprocessable Entity`\n\n<RedocResponse  pointer={\"#/components/responses/UnprocessableEntity\"} />\n\n## Internal Server Error\n\nAn internal server error occurred due to an unexpected condition, and is most likely due to an issue with our servers. If you encounter such an error, please reach out to [support@Trua.com](mailto:support@Trua.com) and we will work with you to resolve the issue.\n\n- code: `500`\n\n- status: `Internal Server Error`\n\n# Embeddable Views\nTrua has published a public npm library for utilizing Trua embeddable views https://www.npmjs.com/package/@Trua/embeddable-sdk\n<br>You can also check out this quick start demo example of how it all works https://github.com/Trua/embeddable-sdk-demo\n\n## Installation\nThe Trua embeddable-sdk library is available as an npm package.\n\n- with npm\n`npm i @Trua/embeddable-sdk`\n\n- with yarn\n`yarn add @Trua/embeddable-sdk`\n\n## Getting Started\nHere is a quick example to get you started:\n\n`import { Trua } from '@Trua/embeddable-sdk';`\n\n## Available Views\nEach available page view is a separate method on the exported Trua library object. The currently supported views are as follows:\n\n  1. CandidateReportIframe: Allows the user to view and interact with a candidate report.\n  2. AccountDisclosuresIframe: Allows the user to view and agree to account level agreements and terms.\n\n## Creating an Instance of an Available View\nTo create an instance of the desired view, which will be attached to a specified container on your page, call the applicable method and pass in the configuration object.\n\n  ```\n    const TruaReport = new Trua.CandidateReportIframe(\n      {\n        token: myToken,\n        reportId: myReportId,\n        container: containerRef.current,\n        domain: myDomain\n      }\n    );\n  ```\n\n## CandidateReportIframe\nThe config object for the CandidateReportIframe takes the following parameters:\n\n  `token: string`          - JWT for authorization<br /><br />\n  `reportId: string`       - The ID of the report that you would like to review<br /><br />\n  `container: HTMLElement` - Container to which the iframe will be attached<br /><br />\n  `domain: string`         - Trua domain that you would like to call<br /><br />\n  `width?: string`         - Optional width of the iframe<br /><br />\n  `height?: string`        - Optional height of the iframe<br /><br />\n  `fullScreen?: boolean`   - Optional, if true, iframe will fill the entire page<br /><br />\n\n## AccountDisclosureIframe\nThe config object for the AccountDisclosureIframe takes the following parameters:\n\n  `token: string`          - JWT for authorization<br /><br />\n  `accountId: string`      - The ID of the account that you would like to review<br /><br />\n  `container: HTMLElement` - Container to which the iframe will be attached<br /><br />\n  `domain: string`         - Trua domain that you would like to call<br /><br />\n  `width?: string`         - Optional width of the iframe<br /><br />\n  `height?: string`        - Optional height of the iframe<br /><br />\n  `fullScreen?: boolean`   - Optional, if true, iframe will fill the entire page<br /><br />\n\n## Obtaining JWT\nTo obtain a JWT to include in the config object (from your backend), make a request to the [JWT Route](#tag/JWT) using your API token for authorization.\n\n## Shared Methods For Use By Parent Page\nEach view has a shared method that can be called by the parent page and utilized for customization and performance.\n\n  destroy: When called, the destroy method will remove the iframe from its parent container. This method can be used by the parent page for clean-up.\n\n  `TruaReport.destroy()`\n\n## Message Events\nIn order to allow the parent to take action, each iframe view is set up to post certain message events to the parent page in which it is contained.\n\n  `loaded`: Each iframe instance will post a 'loaded' message event when the iframe content has fully loaded. The parent page could listen for this event to trigger an action, such as rendering the iframe visible or turning off a loading animation.\n\n  ```\n    TruaReport.on('loaded', () => {\n      console.log(\"The iframe is ready.\");\n      setIframeReady(true)\n    ;})\n  ```\n\n  `expiration`: Each iframe instance will post an 'expiration' message event when the authorization token has expired. The parent can listen for this event to trigger an action, such as requesting a new JWT from your backend to refresh the session or instructing the user to refresh the page, so that a new token is generated.\n\n  ```\n    TruaReport.on('expiration', () => {\n    console.log(\"The JWT has expired.\");\n    setTokenExpired(true);\n  })\n  ```\n"
  },
  "servers": [
    {
      "url": "https://api.Trua-staging.com",
      "description": "Staging API"
    },
    {
      "url": "https://api.Trua.com",
      "description": "Production API"
    }
  ],
  "security": [
    {
      "ApiKey": []
    }
  ],
  "tags": [
    {
      "name": "Accounts",
      "description": "Accounts are your primary resource for configuring the Trua platform.</br> Use this to manage users, settings, and API keys.\n"
    },
    {
      "name": "Account Custom Fields",
      "description": "You can add custom fields to resources in an account.</br> To begin leveraging candidate custom fields please reach out to <a href=\"mailto:support@Trua.com?subject=Custom Field Request - <ACCOUNT>&body=Hello, I am working on account <ACCOUNT> and would like to request a new custom field.%0A%0Acustom_field_type: %0Adescription: %0Alabel: %0Aname: %0Aresource: %0A%0AThanks,%0A%0A\" title=\"support@Trua.com\">support@Trua.com</a> for field setup.\n"
    },
    {
      "name": "Subaccounts",
      "description": "Subaccounts are children of a platform account, and can be used to isolate resources and configuration settings. For a more detailed explanation, check out the [Platforms and Subaccounts](#section/Platforms-and-Subaccounts) section.\n"
    },
    {
      "name": "Packages",
      "description": "Packages are collections of background screens, searches, and verifications used to create a report.\n"
    },
    {
      "name": "Account Packages",
      "description": "Account packages are your account's collections of background screens, searches, and verifications used to create a report.</br><br/> Call the [List Account Packages](#operation/getPackages) endpoint to get a list of your available account packages.</br> Use this to maintain a list of currently enabled packages for your account. As packages are added and removed from your account, this will allow you</br> to get the IDs and descriptions without hard coding them in your application.\n"
    },
    {
      "name": "Consents",
      "description": "Consents are documents that must be signed by the candidate before a report can be generated.</br> Use this resource to retrieve the necessary consents for a given account package and candidate location.\n"
    },
    {
      "name": "Candidates",
      "x-internal": false,
      "description": "Candidates represent the people you'll be running reports on.</br> All candidates must consent to the required legal documents before the report can begin processing.</br> Use this resource to collect all Personally Identifiable Information (PII) required to order a report or invite the candidate.\n"
    },
    {
      "name": "Invitations",
      "description": "When an invitation is created, Trua will invite the candidate to complete their report (by email and/or SMS depending on your settings). The invitation will include a link to the candidate's unique intake form. When the candidate accesses their form, the information they're required to enter will be defined by the package you chose when you created the invitation. For a broader explanation, see [Order Your First Report](#section/Getting-Started/Order-Your-First-Report).\n\nInvitations have their own [statuses](#section/Report-Lifecycle/Invitation-Statuses) that can be tracked using the `GET` operation.\n\n_Note: By default, invitations expire 7 days after they're created, but you can change that timeframe in your [Notifications Settings](https://app.Trua.com/settings/general)._ The changes you make will be applied to new invitations; they won't impact any existing ones.\n"
    },
    {
      "name": "Reports",
      "description": "Reports contain the results of all background screens, searches, and verifications defined in the account package that was selected while creating the report.</br></br> See the [Order Your First Report](#section/Getting-Started/Order-Your-First-Report) section.\n"
    },
    {
      "name": "Adverse Actions",
      "description": "Actions taken on a report due to findings that may disqualify the candidate.</br></br> See the [Adverse Action](#section/Report-Lifecycle/Adverse-Action) section.\n"
    },
    {
      "name": "Webhooks",
      "description": "Use Webhooks to connect Trua with your application. You can configure them to notify you of various events when they occur in your account.</br></br> See the [Using Webhooks](#section/Using-Webhooks) section.\n"
    },
    {
      "name": "JWT",
      "description": "A JWT is required to access the Trua [Embeddable Views](#section/Embeddable-Views).\n"
    }
  ],
  "paths": {
    "/candidates": {
      "get": {
        "tags": [
          "Candidates"
        ],
        "summary": "List candidates",
        "description": "Retrieve a paginated list of candidates. See [Pagination](#section/Pagination).\n",
        "operationId": "getCandidates",
        "x-internal": false,
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Query"
          },
          {
            "$ref": "#/components/parameters/OrderBy"
          },
          {
            "$ref": "#/components/parameters/Order"
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "list"
                      ]
                    },
                    "meta": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Candidate"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Candidates"
        ],
        "summary": "Create a candidate",
        "description": "A candidate is the person whose information we'll use when you order a report. As far as providing their information to Trua, you have a couple of options.\n\n#### Ask the candidate to enter their own info\nIf you plan to [create an invitation](#operation/createInvitation) or have the candidate enter their information in an embedded Trua view, you only need to provide the strictly required attributes when you create the candidate\n- first_name\n- last_name\n- email\n\nBased on the package, the candidate will be presented with a form to enter the rest of the information needed to run their report. If you have additional candidate information, feel free to provide it. We’ll autofill it into the candidate’s form, saving them time.\n\n#### Provide all candidate info yourself\nIf you have all of the candidate's information on-hand, you can provide it to Trua directly. The information required for each package will differ somewhat, so we recommend that you reference the `intake_fields` array on the [list all packages](#operation/getPackages) response for the package you plan to use. Provide the required intake fields when you create the candidate. Some of the most commonly required candidate-level intake fields are\n- first_name\n- last_name\n- email\n- phone\n- ssn\n- date_of_birth\n- zip_code\n- driver_license_number\n- driver_license_state\n\nSome packages additionally require screening-level fields (a separate `intake_fields` array within the `screenings` object on the same response), which you can send when you create the report. _Note: If any of the required intake fields are missing when you create the report, we’ll invite the candidate to enter the information themselves._\n",
        "operationId": "createCandidate",
        "x-internal": false,
        "requestBody": {
          "$ref": "#/components/requestBodies/CandidateCreate"
        },
        "responses": {
          "200": {
            "description": "Candidate already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Candidate"
                }
              }
            }
          },
          "201": {
            "description": "Candidate was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Candidate"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/candidates/{candidate_id}": {
      "parameters": [
        {
          "name": "candidate_id",
          "in": "path",
          "description": "The candidate unique identifier.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "tags": [
          "Candidates"
        ],
        "summary": "Get a candidate",
        "description": "Retrieve a candidate with the given ID.\n",
        "operationId": "getCandidateById",
        "x-internal": false,
        "responses": {
          "200": {
            "description": "Candidate details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Candidate"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Candidates"
        ],
        "summary": "Update a candidate",
        "description": "Update a candidate with the given ID.\n",
        "operationId": "patchCandidateById",
        "x-internal": false,
        "requestBody": {
          "$ref": "#/components/requestBodies/CandidateUpdate"
        },
        "responses": {
          "200": {
            "description": "Candidate details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Candidate"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/candidates/{candidate_id}/addresses/{address_id}": {
      "parameters": [
        {
          "name": "candidate_id",
          "in": "path",
          "description": "The candidate ID.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        {
          "name": "address_id",
          "in": "path",
          "description": "The address ID.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "delete": {
        "tags": [
          "Candidates"
        ],
        "summary": "Delete candidate address.",
        "description": "Permanently delete a candidate's address by the given address id.\n",
        "operationId": "deleteCandidateAddressById",
        "x-internal": false,
        "responses": {
          "200": {
            "description": "Deleted address details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/candidates/{candidate_id}/documents": {
      "parameters": [
        {
          "name": "candidate_id",
          "in": "path",
          "description": "The candidate ID.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "tags": [
          "Candidates"
        ],
        "summary": "List candidate documents.",
        "description": "Retrieve a paginated list of documents for a candidate. See [Pagination](#section/Pagination).\n",
        "operationId": "getCandidateDocuments",
        "x-internal": false,
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "List of documents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "list"
                      ]
                    },
                    "meta": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/show"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Candidates"
        ],
        "summary": "Create a new candidate document.",
        "description": "When sending a request to create a document, you can send the file in two different ways. <br><br> 1. You can send the `file` as a binary file using the `multipart/form-data` content type. <br><br> 2. You can send the parameter `file_base64` as a base64 encoded string using the `application/json` content type. <br><br> The file size limit is 10MB.\n",
        "operationId": "createCandidateDocument",
        "x-internal": false,
        "requestBody": {
          "$ref": "#/components/requestBodies/create"
        },
        "responses": {
          "200": {
            "description": "Create document details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/show"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/candidates/{candidate_id}/documents/{document_id}": {
      "parameters": [
        {
          "name": "candidate_id",
          "in": "path",
          "description": "The candidate ID.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        {
          "name": "document_id",
          "in": "path",
          "description": "The document ID.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "tags": [
          "Candidates"
        ],
        "summary": "Get a candidate document",
        "description": "Retrieve a candidate document with the given ID.\n",
        "operationId": "getCandidateDocumentById",
        "x-internal": false,
        "responses": {
          "200": {
            "description": "Document details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/show"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/invitations": {
      "get": {
        "tags": [
          "Invitations"
        ],
        "summary": "List Invitations",
        "description": "Retrieve a paginated list of invitations. See [Pagination](#section/Pagination).\n",
        "operationId": "getInvitations",
        "x-internal": false,
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Query"
          },
          {
            "$ref": "#/components/parameters/OrderBy"
          },
          {
            "$ref": "#/components/parameters/Order"
          }
        ],
        "responses": {
          "200": {
            "description": "List of invitations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "list"
                      ]
                    },
                    "meta": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invitation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Invitations"
        ],
        "summary": "Create an invitation.",
        "description": "Creates a new invitation and emails the candidate asking them to complete a report.\n",
        "operationId": "createInvitation",
        "requestBody": {
          "$ref": "#/components/requestBodies/InvitationCreate"
        },
        "responses": {
          "201": {
            "description": "Invitation was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/invitations/{invitation_id}": {
      "parameters": [
        {
          "name": "invitation_id",
          "in": "path",
          "description": "The invitation ID.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "tags": [
          "Invitations"
        ],
        "summary": "Get an invitation.",
        "description": "Retrieve an invitation with the given ID.\n",
        "operationId": "getInvitationById",
        "responses": {
          "200": {
            "description": "Invitation details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Invitations"
        ],
        "summary": "Delete an invitation.",
        "description": "Permanently delete an invitation with the given ID.\n",
        "operationId": "deleteInvitationById",
        "x-internal": false,
        "responses": {
          "204": {
            "description": "No Content."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/invitations/{invitation_id}/cancel": {
      "parameters": [
        {
          "name": "invitation_id",
          "in": "path",
          "description": "The invitation ID.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "patch": {
        "tags": [
          "Invitations"
        ],
        "summary": "Cancel an invitation.",
        "description": "Cancel an invitation with the given ID..\n",
        "operationId": "cancelInvitationById",
        "responses": {
          "200": {
            "description": "Invitation successfully canceled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/invitations/{invitation_id}/refresh": {
      "parameters": [
        {
          "name": "invitation_id",
          "in": "path",
          "description": "The invitation ID.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "patch": {
        "tags": [
          "Invitations"
        ],
        "summary": "Refresh an invitation.",
        "description": "Refresh an invitation with the given `invitation_id`.<br/> Minimum `expires_at` date must be 24 hours in the future. There is no maximum.<br/> Can only refresh when the invitation is in `expired` or `canceled` status.\n",
        "operationId": "refreshInvitationById",
        "requestBody": {
          "$ref": "#/components/requestBodies/InvitationRefresh"
        },
        "responses": {
          "200": {
            "description": "Invitation successfully refreshed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/custom-fields": {
      "get": {
        "tags": [
          "Account Custom Fields"
        ],
        "summary": "List all custom fields",
        "description": "Retrieve a paginated list of Account Custom Fields. See [Pagination](#section/Pagination).\n",
        "operationId": "getAccountCustomFields",
        "x-internal": false,
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Query"
          },
          {
            "$ref": "#/components/parameters/OrderBy"
          },
          {
            "$ref": "#/components/parameters/Order"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Account Custom Fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "meta": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AccountCustomFields"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/consents": {
      "get": {
        "tags": [
          "Consents"
        ],
        "summary": "List All Consents",
        "description": "Retrieve the necessary consents for a given account package and candidate location",
        "operationId": "getConsents",
        "x-internal": false,
        "parameters": [
          {
            "schema": null,
            "type": "string",
            "in": "query",
            "name": "account_package_id",
            "description": "Account package ID.  Use `id` from [List Account Packages](#operation/getPackages)",
            "required": true
          },
          {
            "schema": null,
            "type": "string",
            "in": "query",
            "name": "candidate_location[country]",
            "description": "Country code of the candidate location. If not provided, default value is US.",
            "required": false
          },
          {
            "schema": null,
            "type": "string",
            "in": "query",
            "name": "candidate_location[state]",
            "description": "State location of the candidate. Two-letter state abbreviation.",
            "required": true
          },
          {
            "schema": null,
            "type": "string",
            "in": "query",
            "name": "candidate_location[city]",
            "description": "City location of the candidate.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Consent details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/reports": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List reports",
        "description": "Retrieve a paginated list of reports. See [Pagination](#section/Pagination).\n",
        "operationId": "getReports",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Query"
          },
          {
            "$ref": "#/components/parameters/OrderBy"
          },
          {
            "$ref": "#/components/parameters/Order"
          }
        ],
        "responses": {
          "200": {
            "description": "List of reports.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "list"
                      ]
                    },
                    "meta": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Report"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create a report",
        "description": "Create a new report. The report will be generated based on the candidate ID provided.</br> See [Create Candidate](#operation/createCandidate) for required attributes.\nThe account packages available will be configured during onboarding by Trua.</br> Each account package will be configured with a set of screenings and configurations that determine the report flow and candidate experience.</br></br> To see available packages use [List Account Packages](#operation/getPackages).</br>\n",
        "operationId": "postReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "candidate_id": {
                    "type": "string",
                    "format": "UUID",
                    "description": "Unique identifier for the candidate."
                  },
                  "account_package_id": {
                    "type": "string",
                    "format": "UUID",
                    "description": "The account package ID for the package you want use to create a report. Use `id` from [List Account Packages](#operation/getPackages)."
                  },
                  "reference_id": {
                    "type": "string",
                    "description": "A reference ID that can be used for your application."
                  }
                },
                "required": [
                  "candidate_id",
                  "account_package_id"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportCreate"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/reports/{reportId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get a report",
        "description": "Get a report with the given ID.",
        "operationId": "getReportById",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "reportId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportCreate"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/reports/{reportId}/adverse_actions": {
      "post": {
        "tags": [
          "Adverse Actions"
        ],
        "summary": "Create an Adverse Action",
        "description": "Create an adverse action on a report with the given ID.<br/><br/> During the creation of the adverse action, in the `violations` parameter the only required information is the `description`<br/><br/>\nThe `violations` parameter is required in most scenarios.<br/> For more details about this parameter and the adverse action process as a whole, check out the [Adverse Action](#section/Report-Lifecycle/Adverse-Action) section.<br/>\n",
        "operationId": "createAAReportById",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "reportId",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "violations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string",
                          "description": "The description of the violation."
                        },
                        "disposition": {
                          "type": "string",
                          "description": "The disposition of the violation."
                        },
                        "disposition_date": {
                          "type": "string",
                          "description": "Disposition date of the violation."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdverseAction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/reports/{report_id}/documents": {
      "parameters": [
        {
          "name": "report_id",
          "in": "path",
          "description": "The report ID.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List report documents.",
        "description": "Retrieve a paginated list of documents for a report. See [Pagination](#section/Pagination).\n",
        "operationId": "getReportDocuments",
        "x-internal": false,
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          }
        ],
        "responses": {
          "200": {
            "description": "List of documents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "list"
                      ]
                    },
                    "meta": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/show"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create a new report document.",
        "description": "When sending a request to create a document, you can send the file in two different ways. <br><br> 1. You can send the `file` as a binary file using the `multipart/form-data` content type. <br><br> 2. You can send the parameter `file_base64` as a base64 encoded string using the `application/json` content type. <br><br> The file size limit is 10MB.\n",
        "operationId": "createReportDocument",
        "x-internal": false,
        "requestBody": {
          "$ref": "#/components/requestBodies/create"
        },
        "responses": {
          "200": {
            "description": "Create document details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/show"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/reports/{report_id}/documents/{document_id}": {
      "parameters": [
        {
          "name": "report_id",
          "in": "path",
          "description": "The report ID.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        {
          "name": "document_id",
          "in": "path",
          "description": "The document ID.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ResourceId"
          }
        }
      ],
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get a report document",
        "description": "Retrieve a report document with the given ID.\n",
        "operationId": "getReportDocumentById",
        "x-internal": false,
        "responses": {
          "200": {
            "description": "Document details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/show"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/adverse_actions/{adverse_action_id}/cancel": {
      "patch": {
        "tags": [
          "Adverse Actions"
        ],
        "summary": "Cancel an Adverse Action",
        "description": "Cancel an adverse action on a report with the given ID.</br> See the [Adverse Action](#section/Report-Lifecycle/Adverse-Action) section.\n",
        "operationId": "cancelAAReportById",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "adverse_action_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdverseAction"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/candidates/{candidateId}/approve_by_report": {
      "patch": {
        "tags": [
          "Candidates"
        ],
        "summary": "Proceed a report",
        "description": "Proceed a candidate's report that is in a status of `consider`. If successful, the report will update to a `proceed` status. This is a positive result, indicating that the results found on the report do not disqualify the candidate.</br>\n",
        "operationId": "proceedACandidateReport",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "candidateId",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "report_id": {
                    "type": "string",
                    "format": "UUID",
                    "description": "Unique identifier for the report."
                  }
                },
                "required": [
                  "report_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Candidate"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "List all accounts",
        "description": "List all accounts that you have access to.",
        "operationId": "getAccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Query"
          },
          {
            "$ref": "#/components/parameters/OrderBy"
          },
          {
            "$ref": "#/components/parameters/Order"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountList"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/accounts/{accountId}/api_token": {
      "post": {
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The name of the API key",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Accounts"
        ],
        "summary": "Create an API key",
        "description": "Generate a new API key.",
        "operationId": "generateApiToken",
        "x-internal": false,
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/APIKeyExample"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/accounts/{accountId}/settings": {
      "x-internal": false,
      "parameters": [
        {
          "name": "accountId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get all settings",
        "description": "Account settings for a given account ID.",
        "operationId": "getAccountSettingsByAccountId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "styles": {
                      "type": "object",
                      "properties": {
                        "primary_color": {
                          "type": "string",
                          "description": "Hex value for primary base color."
                        },
                        "secondary_color": {
                          "type": "string",
                          "description": "Hex value for secondary base color."
                        },
                        "navigation": {
                          "type": "object",
                          "properties": {
                            "primary_color": {
                              "type": "string",
                              "description": "Hex value for primary base color."
                            },
                            "secondary_color": {
                              "type": "string",
                              "description": "Hex value for secondary base color."
                            },
                            "accent_color": {
                              "type": "string",
                              "description": "Hex value for accent color."
                            }
                          }
                        },
                        "invitation": {
                          "type": "object",
                          "properties": {
                            "primary_color": {
                              "type": "string",
                              "description": "Hex value for primary base color."
                            }
                          }
                        }
                      }
                    },
                    "invitations": {
                      "type": "object",
                      "properties": {
                        "expiration_in_days": {
                          "type": "number",
                          "description": "Amount of days until an invitation will expire."
                        }
                      }
                    },
                    "adverse_actions": {
                      "type": "object",
                      "properties": {
                        "final_adverse_notification_days": {
                          "type": "number",
                          "description": "The number of days a candidate is allowed to respond to an adverse action (minimum 7)."
                        }
                      }
                    },
                    "reports": {
                      "type": "object",
                      "properties": {
                        "create_delay_for_same_account_package": {
                          "type": "number",
                          "description": "The number of days until a report can be re-run on a candidate for the same account package."
                        }
                      }
                    },
                    "report_notifications": {
                      "type": "object",
                      "description": "What kind of statuses trigger an email to account users.",
                      "properties": {
                        "clear": {
                          "type": "boolean",
                          "description": "If true, account users will be notified when a report is set to clear."
                        },
                        "consider": {
                          "type": "boolean",
                          "description": "If true, account users will be notified when a report is set to consider."
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Account settings response": {
                    "value": {
                      "styles": {
                        "primary_color": "FFCD01",
                        "secondary_color": "FFCD02",
                        "navigation": {
                          "primary_color": "FFCD01",
                          "secondary_color": "FFCD02",
                          "accent_color": "8E17BF"
                        },
                        "invitation": {
                          "primary_color": "FFCD01"
                        }
                      },
                      "invitations": {
                        "expiration_in_days": 7
                      },
                      "adverse_actions": {
                        "final_adverse_notification_days": 7
                      },
                      "reports": {
                        "create_delay_for_same_account_package": 30
                      },
                      "report_notifications": {
                        "clear": true,
                        "consider": true
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/accounts/{accountId}/settings/{settingKey}": {
      "x-internal": false,
      "parameters": [
        {
          "name": "accountId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "settingKey",
          "schema": {
            "type": "string"
          },
          "description": "e.g. styles",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get an account setting",
        "description": "Get a single account setting for the given account ID and setting key.",
        "operationId": "getAccountSettingsByAccountIdAndSettingKey",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                },
                "examples": {
                  "Example Response": {
                    "value": {
                      "primary_color": "FFCD01",
                      "secondary_color": "FFCD01"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "patch": {
        "tags": [
          "Accounts"
        ],
        "summary": "Update an account setting",
        "description": "Update an account setting for the given account ID and setting key.",
        "operationId": "patchAccountSettingsByAccountIdAndSettingKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "examples": {
                "Patch Request Example": {
                  "value": {
                    "primary_color": "FFCD01"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/sub_accounts": {
      "get": {
        "tags": [
          "Subaccounts"
        ],
        "summary": "List subaccounts",
        "description": "Retrieve a paginated list of all subaccounts that belong to your platform account. See [Pagination](#section/Pagination).\n",
        "operationId": "getSubaccounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Query"
          },
          {
            "$ref": "#/components/parameters/OrderBy"
          },
          {
            "$ref": "#/components/parameters/Order"
          }
        ],
        "responses": {
          "200": {
            "description": "List of subaccounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "object": {
                      "type": "string",
                      "enum": [
                        "list"
                      ]
                    },
                    "meta": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SubaccountList"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "tags": [
          "Subaccounts"
        ],
        "summary": "Create a subaccount",
        "description": "From your platform account, create a subaccount. <br/> You'll need to provide at least one permissible purpose. You may also provide the account_packages information from your platform account. For a more detailed explanation, check out the [Platforms and Subaccounts](#section/Platforms-and-Subaccounts) section.<br/><br/> Upon creating a new subaccount you will get a `201 Created` response.<br/> If you send another POST with the same `account_name` it will refresh the API token and return `200 OK` with the existing account details.<br/> To make any further updates to the new subaccount, use the new API key from that account and call the [PATCH Accounts](#operation/patchAccountSettingsByAccountIdAndSettingKey) route.",
        "operationId": "createSubaccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email_address": {
                    "type": "string",
                    "description": "Email address of the subaccount owner. This person will be responsible for signing the subaccount's legal documents during credentialing.<br/><br/> See the [Credentialing Subaccounts](#section/Platforms-and-Subaccounts/Credentialing-Subaccounts) section."
                  },
                  "account_name": {
                    "type": "string",
                    "description": "Name of the subaccount."
                  },
                  "first_name": {
                    "type": "string",
                    "description": "First name of the subaccount owner."
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name of the subaccount owner."
                  },
                  "company_phone_number": {
                    "type": "string",
                    "description": "This is for our business verification purposes and will not be included on candidate communication. Must be [E.164 format](https://www.twilio.com/docs/glossary/what-e164), e.g. +14155552671."
                  },
                  "additional_company_info": {
                    "type": "string",
                    "description": "Any extra information that you want to provide."
                  },
                  "url": {
                    "type": "string",
                    "description": "Relevant URL for subaccount."
                  },
                  "tech_email_address": {
                    "type": "string",
                    "description": "Tech email address of the subaccount."
                  },
                  "support_email_address": {
                    "type": "string",
                    "description": "Support email address of the subaccount."
                  },
                  "support_phone": {
                    "type": "string",
                    "description": "Support phone number of the subaccount. Must be [E.164 format](https://www.twilio.com/docs/glossary/what-e164), e.g. +14155552671."
                  },
                  "actions_email_address": {
                    "type": "string",
                    "description": "Actions email address of the subaccount."
                  },
                  "compliance_email_address": {
                    "type": "string",
                    "description": "Compliance email address of the subaccount."
                  },
                  "permissible_purpose_id": {
                    "type": "string",
                    "format": "UUID",
                    "description": "The unique identifier for the subaccount permissible purpose. This field is not required when the account packages or permissible_purpose_ids are provided."
                  },
                  "permissible_purpose_ids": {
                    "type": "array",
                    "description": "The unique identifiers for the subaccount permissible purposes. If this field and the account packages are provided they should match the account packages permissible purposes.",
                    "items": {
                      "type": "string",
                      "format": "UUID"
                    }
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "line1": {
                        "type": "string",
                        "description": "First line of the address."
                      },
                      "line2": {
                        "type": "string",
                        "description": "Second line of the address."
                      },
                      "city": {
                        "type": "string",
                        "description": "City of the address."
                      },
                      "state": {
                        "type": "string",
                        "description": "State of the address.",
                        "maxLength": 2
                      },
                      "zip_code": {
                        "type": "string",
                        "description": "Zip code of the address.",
                        "maxLength": 5
                      }
                    }
                  },
                  "account_packages": {
                    "type": "array",
                    "description": "The account packages that will be created for the subaccount. If this field and the permissible_purpose_ids are provided together, the permissible purpose from the account packages provided should be included in the permissible_purpose_ids.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "UUID",
                          "description": "The unique identifier of the platform account package."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the account package that will be created for the subaccount. If not provided, the name will inherit the platform account package name."
                        },
                        "paid_by": {
                          "type": "string",
                          "description": "To be provided with `account` or `candidate`. This field defines who will pay for the report. If set to `candidate` a payment form will be presented to the candidate when they fill out the intake form."
                        }
                      }
                    }
                  },
                  "create_api_key": {
                    "type": "boolean",
                    "description": "If `false`, an API key will not be created.  This value defaults to `true`."
                  },
                  "owner_title": {
                    "type": "string",
                    "description": "The title of the owner of the account."
                  },
                  "legal_business_name": {
                    "type": "string",
                    "description": "The account legal business name."
                  },
                  "state_of_incorporation": {
                    "type": "string"
                  },
                  "ein": {
                    "type": "string"
                  },
                  "legal_entity_type": {
                    "type": "string",
                    "description": "The type of the legal entity, valid options: `b-corporation`, `corporation`, `c-corporation`, `limited-liability-partnership`, `limited-liability-corporation`, `limited-partnership` and `non-profit`."
                  },
                  "billing_contact_first_name": {
                    "type": "string",
                    "description": "The first name of the billing contact."
                  },
                  "billing_contact_last_name": {
                    "type": "string",
                    "description": "The last name of the billing contact."
                  },
                  "billing_email": {
                    "type": "string",
                    "description": "The email of the billing contact."
                  }
                },
                "required": [
                  "account_name",
                  "first_name",
                  "last_name",
                  "address",
                  "email_address"
                ]
              }
            },
            "form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "email_address": {
                    "type": "string",
                    "description": "Email address of the subaccount owner. This person will be responsible for signing the subaccount's legal documents during credentialing.<br/><br/> See the [Credentialing Subaccounts](#section/Platforms-and-Subaccounts/Credentialing-Subaccounts) section."
                  },
                  "account_name": {
                    "type": "string",
                    "description": "Name of the subaccount."
                  },
                  "first_name": {
                    "type": "string",
                    "description": "First name of the subaccount owner."
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Last name of the subaccount owner."
                  },
                  "company_phone_number": {
                    "type": "string",
                    "description": "This is for our business verification purposes and will not be included on candidate communication. Must be [E.164 format](https://www.twilio.com/docs/glossary/what-e164), e.g +14155552671."
                  },
                  "additional_company_info": {
                    "type": "string",
                    "description": "Any extra information that you want to provide."
                  },
                  "url": {
                    "type": "string",
                    "description": "Relevant URL for the subaccount."
                  },
                  "tech_email_address": {
                    "type": "string",
                    "description": "Tech email address of the subaccount."
                  },
                  "support_email_address": {
                    "type": "string",
                    "description": "Support email address of the subaccount."
                  },
                  "support_phone": {
                    "type": "string",
                    "description": "Support phone number of the subaccount. Must be [E.164 format](https://www.twilio.com/docs/glossary/what-e164), e.g +14155552671."
                  },
                  "actions_email_address": {
                    "type": "string",
                    "description": "Actions email address of the subaccount."
                  },
                  "compliance_email_address": {
                    "type": "string",
                    "description": "Compliance email address of the subaccount."
                  },
                  "permissible_purpose_id": {
                    "type": "string",
                    "format": "UUID",
                    "description": "The unique identifier for the subaccount permissible purpose."
                  },
                  "logo": {
                    "type": "string",
                    "description": "Optional logo that will be shown to the candidates, only available through the form-data content type. If application/json is used, the logo can be uploaded using our application UI."
                  },
                  "address": {
                    "type": "object",
                    "properties": {
                      "line1": {
                        "type": "string",
                        "description": "First line of the address."
                      },
                      "line2": {
                        "type": "string",
                        "description": "Second line of the address."
                      },
                      "city": {
                        "type": "string",
                        "description": "City of the address."
                      },
                      "state": {
                        "type": "string",
                        "description": "State of the address.",
                        "maxLength": 2
                      },
                      "zip_code": {
                        "type": "string",
                        "description": "Zip code of the address.",
                        "maxLength": 5
                      }
                    }
                  },
                  "account_packages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "UUID",
                          "description": "The UUID of the platform account package."
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the account package that will be created for the subaccount. If not provided, will inherit the name of the platform account package."
                        },
                        "paid_by": {
                          "type": "string",
                          "description": "To be provided with `account` or `candidate`. This field defines who will pay for the report. If set to `candidate` a payment form will be presented to the candidate when they fill out the intake form."
                        }
                      }
                    }
                  }
                },
                "required": [
                  "account_name",
                  "first_name",
                  "last_name",
                  "address",
                  "email_address",
                  "permissible_purpose_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubaccountCreated"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubaccountCreated"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/sub_accounts/{sub_account_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "sub_account_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Subaccounts"
        ],
        "summary": "Get a subaccount",
        "description": "You can get the details of any subaccount that belongs to your platform account.",
        "operationId": "getSubaccountById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/accounts/{accountId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "accountId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get an account",
        "description": "Account details.",
        "operationId": "getAccountById",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/packages": {
      "parameters": [
        {
          "in": "query",
          "name": "query",
          "examples": {
            "report": {
              "summary": "Filter by account packages that will generate a single report:",
              "value": {
                "query[action_type_eq]": "report"
              }
            },
            "monitor": {
              "summary": "Filter by account packages that are used for continuous monitoring:",
              "value": {
                "query[action_type_eq]": "monitor"
              }
            },
            "certificate": {
              "summary": "Filter by account packages that are used for certificate verification",
              "value": {
                "query[action_type_eq]": "certificate"
              }
            }
          },
          "schema": {
            "type": "object",
            "properties": {
              "action_type_eq": {
                "type": "string",
                "description": "Filter packages by `action_type_eq`.",
                "enum": [
                  "report",
                  "monitor",
                  "certificate"
                ]
              }
            }
          }
        },
        {
          "in": "query",
          "name": "include_disabled",
          "schema": {
            "type": "boolean"
          },
          "examples": {
            "true": {
              "summary": "lists all packages, including disabled ones",
              "value": {
                "include_disabled": true
              }
            },
            "false": {
              "summary": "is the default value and only lists those that are enabled",
              "value": {
                "include_disabled": false
              }
            }
          }
        }
      ],
      "get": {
        "tags": [
          "Packages"
        ],
        "summary": "List all packages",
        "description": "Returns a list of available account packages for an account using the API token.<br/><br/> This list will be refreshed as new account packages are added or old ones are removed.<br/> Use `id` from each package to order new reports or create invitations.<br/> DO NOT USE `package_id` to order a report, this is a reference ID to the parent package in our database and is only to be used by Trua. Make sure you're always using the `id` instead, which is scoped to your account.<br/><br/>\nDefaults to listing all report packages. To get monitor packages, use the query param `query[action_type_eq]=monitor`\n",
        "operationId": "getPackages",
        "x-internal": false,
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountPackageList"
                },
                "examples": {
                  "Example": {
                    "$ref": "#/components/examples/AccountPackageListExample"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/packages/{packageId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "packageId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/webhooks": {
      "get": {
        "summary": "List all webhooks",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/PerPage"
          },
          {
            "$ref": "#/components/parameters/Query"
          },
          {
            "$ref": "#/components/parameters/OrderBy"
          },
          {
            "$ref": "#/components/parameters/Order"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "UUID",
                        "description": "Unique identifier for the webhook."
                      },
                      "url": {
                        "type": "string",
                        "description": "Target URL to send webhooks payload."
                      },
                      "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "True if webhooks is enabled. False if disabled."
                      },
                      "webhook_type": {
                        "type": "string",
                        "description": "Type of event that triggers this webhook. E.g. `candidate.created`"
                      },
                      "webhook_description": {
                        "type": "string",
                        "description": "Description of the webhook."
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "id": "bc0bb48c-d1f9-4b02-a965-3ce39677532f",
                        "url": "https://google.com",
                        "enabled": true,
                        "webhook_type": "candidate.created",
                        "webhook_description": "A candidate has been created."
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "getAccountWebhookByAccountId",
        "description": "Retrieve a list of webhooks for the given account ID."
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a webhook",
        "description": "Create a webhook",
        "operationId": "createAccountWebhookByAccountId",
        "x-internal": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "webhook_type_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  }
                }
              },
              "examples": {
                "Webhook creation": {
                  "value": {
                    "webhook_type_id": "c6b6e55f-5b3a-479a-9ea8-d95d13856c7d",
                    "url": "http://127.0.0.1:8080"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhook_type": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Creating the account webhook response": {
                    "value": {
                      "id": "e8b57b13-0038-4c69-99ee-1dae304afd80",
                      "webhook_type": "candidate.created",
                      "url": "https://mywebhooksservice.com:8080"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/webhooks/{webhook_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "webhook_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Show a webhook",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "UUID",
                        "description": "Unique identifier for the webhook."
                      },
                      "url": {
                        "type": "string",
                        "description": "Target URL to send webhooks payload."
                      },
                      "enabled": {
                        "type": "boolean",
                        "format": "boolean",
                        "description": "True if webhooks is enabled. False if disabled."
                      },
                      "webhook_type": {
                        "type": "string",
                        "description": "Type of event that triggers this webhook. E.g. `candidate.created`"
                      },
                      "webhook_description": {
                        "type": "string",
                        "description": "Description of the webhook."
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "id": "bc0bb48c-d1f9-4b02-a965-3ce39677532f",
                        "url": "https://google.com",
                        "enabled": true,
                        "webhook_type": "candidate.created",
                        "webhook_description": "A candidate has been created."
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "ShowWebhook",
        "description": "Show a specific webhook for a given ID."
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update a webhook",
        "description": "Update a webhook for a given ID.",
        "operationId": "Updatewebhook",
        "x-internal": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "Update the webhook URL."
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "True if enabled. False if disabled."
                  }
                }
              },
              "examples": {
                "Webhook creation": {
                  "value": {
                    "url": "https://api.Trua.com",
                    "enabled": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhook_type": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Creating the account webhook response": {
                    "value": {
                      "id": "e8b57b13-0038-4c69-99ee-1dae304afd80",
                      "webhook_type": "candidate.created",
                      "url": "http://127.0.0.1:8080"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a webhook",
        "description": "Delete a webhook given an Id",
        "operationId": "Deletewebhook",
        "x-internal": false,
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/webhook_types": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List all webhook types",
        "description": "List all webhook types enabled for your account.</br> For a list of available types, see [Listen for Webhook Events](#section/Using-Webhooks/Listen-for-Webhook-Events)\n",
        "operationId": "getWebhookTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "system_name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "id": "c6b6e55f-5b3a-479a-9ea8-d95d13856c7d",
                        "system_name": "candidate.created",
                        "description": "A new candidate has been created."
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/web_tokens": {
      "post": {
        "summary": "Get a JWT",
        "operationId": "getWebToken",
        "tags": [
          "JWT"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "items": {
                    "type": "object",
                    "properties": {
                      "token": {
                        "type": "string",
                        "description": "JWT token to be used for embedable views."
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "token": "String"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Package": {
        "title": "Package",
        "type": "object",
        "x-examples": {
          "example-1": {}
        },
        "properties": {
          "id": {
            "type": "string"
          },
          "package_name": {
            "type": "string"
          },
          "screening_system_package_name": {
            "type": "string"
          },
          "base_price": {
            "type": "number"
          }
        },
        "description": ""
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "The page number of the response.",
            "default": 1,
            "minimum": 1,
            "example": 2
          },
          "per_page": {
            "type": "integer",
            "description": "The number of results per page.",
            "default": 50,
            "minimum": 1,
            "maximum": 100,
            "example": 25
          },
          "total_count": {
            "type": "integer",
            "description": "The total number of resources available.",
            "minimum": 0,
            "example": 137
          },
          "total_pages": {
            "type": "integer",
            "description": "The total number of pages available.",
            "minimum": 0,
            "example": 6
          }
        }
      },
      "ResourceId": {
        "type": "string",
        "description": "A unique identifier for the object. Defaults to UUID v4.",
        "format": "uuid",
        "maxLength": 50,
        "example": "4f6cf35x-2c4y-483z-a0a9-158621f77a21"
      },
      "EmailAddress": {
        "type": "string",
        "description": "An email address.",
        "example": "joe.clean@example.com"
      },
      "CandidateMeta": {
        "type": "object",
        "description": "Relevant links for a candidate",
        "properties": {
          "entity": {
            "type": "string",
            "description": "Link to API resource."
          },
          "create_report": {
            "type": "string",
            "description": "Link to URL used to create an new report in the API."
          }
        }
      },
      "CandidateCommon": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ],
            "description": "The candidate identifier.",
            "readOnly": true
          },
          "object": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "candidate"
            ]
          },
          "first_name": {
            "type": "string",
            "description": "The first name of the candidate."
          },
          "middle_name": {
            "type": "string",
            "description": "The middle name of the candidate.",
            "nullable": true
          },
          "no_middle_name": {
            "type": "boolean",
            "description": "True if candidate has no middle name, otherwise False or null..",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the candidate."
          },
          "email": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailAddress"
              }
            ],
            "description": "The email address of the candidate."
          },
          "phone": {
            "type": "string",
            "description": "The primary SMS capable phone number of the candidate. <br/> Must be [E.164 format](https://www.twilio.com/docs/glossary/what-e164), e.g. +14155552671.",
            "example": "+14155552671",
            "nullable": true
          },
          "ssn": {
            "type": "string",
            "description": "The social security number of the candidate. <br/> Must be in this format \\###-##-####, e.g. 111-11-1111.",
            "example": "111-22-3333",
            "writeOnly": true
          },
          "ssn_masked": {
            "type": "string",
            "description": "The masked social security number of the candidate.",
            "readOnly": true
          },
          "date_of_birth": {
            "type": "string",
            "description": "The date of birth of the candidate.",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "description": "The gender of the candidate.",
            "nullable": true
          },
          "driver_license_number": {
            "type": "string",
            "description": "The drivers license number of the candidate.",
            "nullable": true
          },
          "driver_license_state": {
            "type": "string",
            "description": "The state the candidates drivers license is issued by as ISO 3166-2 two letter code.",
            "nullable": true
          },
          "previous_driver_license_number": {
            "type": "string",
            "description": "The previous drivers license number of the candidate.",
            "nullable": true
          },
          "previous_driver_license_state": {
            "type": "string",
            "description": "The state the candidates previous drivers license is issued by as ISO 3166-2 two letter code.",
            "nullable": true
          },
          "evergreen": {
            "type": "string",
            "description": "Indicates the candidate provided consent via the Trua authorization for future reports or monitors to be run if compliant with state laws.",
            "format": "boolean",
            "readOnly": true
          },
          "external_id": {
            "type": "string",
            "description": "This field you can use to store any identifier that you could track back on your application.",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "The datetime at which the candidate was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "The datetime at which the candidate was last updated.",
            "format": "date-time",
            "readOnly": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CandidateMeta"
              }
            ]
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ],
            "description": "The address identifier."
          },
          "object": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "address"
            ]
          },
          "line1": {
            "type": "string",
            "description": "The first line of the address.",
            "nullable": true
          },
          "line2": {
            "type": "string",
            "description": "The second line of the address.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city of the address.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "The state of the address.",
            "nullable": true
          },
          "zip_code": {
            "type": "string",
            "description": "The zip code of the address.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "The country of the address as ISO 3166 Alpha-2 two letter code.",
            "nullable": true
          }
        }
      },
      "CustomFields": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ],
            "description": "The custom field identifier."
          },
          "name": {
            "type": "string",
            "description": "The name of the custom field."
          },
          "label": {
            "type": "string",
            "description": "The label of the custom field."
          },
          "description": {
            "type": "string",
            "description": "The description of the custom field."
          },
          "value": {
            "type": "string",
            "description": "The data of the custom field."
          },
          "type": {
            "type": "string",
            "description": "The data type of a custom field",
            "enum": [
              "string",
              "date",
              "number",
              "boolean"
            ]
          }
        }
      },
      "Candidate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CandidateCommon"
          },
          {
            "type": "object",
            "properties": {
              "addresses": {
                "type": "object",
                "description": "The addresses of the candidate.",
                "readOnly": true,
                "properties": {
                  "object": {
                    "type": "string",
                    "enum": [
                      "list"
                    ]
                  },
                  "data": {
                    "type": "array",
                    "description": "An array of address resources associate with the candidate.",
                    "items": {
                      "$ref": "#/components/schemas/Address"
                    }
                  }
                }
              },
              "custom_fields": {
                "type": "array",
                "description": "Additional custom fields for the account",
                "items": {
                  "$ref": "#/components/schemas/CustomFields"
                }
              }
            }
          }
        ]
      },
      "CustomFieldsCreateOrUpdate": {
        "type": "object",
        "description": "Custom fields must be passed in an object in key-value format <br> <h3>Example:</h3>\n  ```\n  {\n    age: 31,\n    birth_date: \"1991-01-31\",\n    former_employee: true\n  }\n  ```\n",
        "properties": {
          "first_custom_field_name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "second_custom_field_name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "third_custom_field_name": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "and_so_on...": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ]
          }
        }
      },
      "show": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ],
            "description": "The document identifier."
          },
          "filename": {
            "type": "string",
            "description": "The filename of the document, this is the original filename that is being uploaded. You can override this filename by sending the filename in the request body on creation."
          },
          "content_type": {
            "type": "string",
            "description": "The content type of the document."
          },
          "document_type": {
            "type": "object",
            "description": "The type of the document.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the document type."
              },
              "label": {
                "type": "string",
                "description": "The label of the document type."
              }
            }
          },
          "url": {
            "type": "string",
            "description": "The url of the document, this URL link is only valid for 15 minutes. This link should not be stored since the url will expire."
          },
          "file_size": {
            "type": "integer",
            "description": "The size of the document in bytes."
          },
          "created_at": {
            "type": "string",
            "format": "DateTime",
            "description": "Timestamp of when the document was created."
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp of when the documents was last updated."
          }
        }
      },
      "create_structure": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ],
            "description": "The document identifier."
          },
          "filename": {
            "type": "string",
            "description": "The filename of the document, this is the original filename that is being uploaded. You can override this filename by sending the filename in the request body.",
            "nullable": false
          },
          "document_type": {
            "type": "string",
            "description": "The type of the document. Supported document types:<br> <ul> <li>`drivers_license_back`</li> <li>`drivers_license_front`</li> <li>`ga_statewide`</li> <li>`pa_mvr`</li> <li>`professional_license`</li> <li>`proof_of_driving_experience`</li> <li>`proof_of_employment`</li> <li>`proof_of_insurance`</li> <li>`ssn_card_front`</li> <li>`va_statewide`</li> <li>`medical_examiners_certificate`</li> </ul>",
            "nullable": false
          },
          "file": {
            "type": "string",
            "description": "When using the `multipart/form-data` content type, the file must be sent as a binary file. <br><br> The file to upload. The file size limit is 10MB. <br><br> This is not a required field, if you send the `file_base64` field, this field will be ignored."
          },
          "file_base64": {
            "type": "string",
            "description": "When using the `application/json` content type, the file must be sent as a base64 encoded string. <br><br> The file to upload encoded in base64. The file size limit is 10MB. <br><br> This is not a required field, if you send the `file` field, this field will be ignored."
          }
        },
        "required": [
          "document_type",
          "file",
          "file_base64"
        ]
      },
      "InvitationMeta": {
        "type": "object",
        "description": "Relevant links for an invitation",
        "properties": {
          "entity": {
            "type": "string",
            "description": "Link to API resource."
          },
          "apply_url": {
            "type": "string",
            "description": "Link to candidate profile intake form."
          }
        }
      },
      "Invitation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "UUID",
            "description": "Unique identifier for the invitation."
          },
          "status": {
            "type": "string",
            "description": "The status of the invitation."
          },
          "external_id": {
            "type": "string",
            "description": "ID used for external entities.",
            "nullable": true
          },
          "platform_service_id": {
            "type": "string",
            "description": "ID for the specific platform used.",
            "nullable": true
          },
          "expires_at": {
            "description": "Timestamp when the invitation will expire.  Defaults to account setting.",
            "type": "string",
            "format": "date-time"
          },
          "canceled_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when an invitation was canceled.",
            "nullable": true
          },
          "confirmation_code": {
            "type": "string",
            "description": "Confirmation code assaociated with the invite, given to the candidate for records."
          },
          "account_id": {
            "description": "The account ID associated with this invitation.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ]
          },
          "account_name": {
            "type": "string",
            "description": "Name of the account associated with this invitation."
          },
          "created_at": {
            "type": "string",
            "description": "Time the report was created.",
            "format": "DateTime"
          },
          "updated_at": {
            "type": "string",
            "description": "Time the report was updated.",
            "format": "DateTime"
          },
          "logo": {
            "type": "string",
            "description": "Filepath to the logo."
          },
          "report_urls": {
            "type": "array",
            "description": "An array of URLs related to this invitation.",
            "items": {
              "type": "string"
            }
          },
          "styles": {
            "type": "object",
            "description": "Specific styles associated with your account.",
            "properties": {
              "theme_base": {
                "type": "string"
              },
              "primary_color": {
                "type": "string",
                "description": "HEX color identifier."
              },
              "bg_image": {
                "type": "string",
                "nullable": true
              }
            }
          },
          "candidate": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/CandidateCommon"
              }
            ]
          },
          "account": {
            "type": "object",
            "properties": {
              "account_name": {
                "type": "string",
                "description": "Name of the account."
              },
              "support_email_address": {
                "type": "string",
                "description": "Support email associated with the account."
              },
              "support_phone": {
                "type": "string",
                "description": "Phone number associated with the account."
              }
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvitationMeta"
              }
            ]
          },
          "report": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The report unique identifier.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResourceId"
                  }
                ]
              },
              "status": {
                "type": "string",
                "description": "Status of the report."
              }
            }
          }
        }
      },
      "ReportMeta": {
        "type": "object",
        "description": "Relevant links for a report",
        "properties": {
          "entity": {
            "type": "string",
            "description": "Link to API resource."
          },
          "apply": {
            "type": "string",
            "description": "Link to candidate profile intake form."
          },
          "report_url": {
            "type": "string",
            "description": "Link to account report in frontend dashboard UI."
          },
          "profile_url": {
            "type": "string",
            "description": "Link to candidate report in frontend profile application."
          }
        }
      },
      "Report": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "UUID",
            "description": "Unique identifier for the report."
          },
          "status": {
            "type": "string",
            "description": "Status of the report."
          },
          "adjudication": {
            "type": "string",
            "nullable": true,
            "description": "The current status of an Adverse Action process."
          },
          "submitted_at": {
            "type": "string",
            "format": "DateTime",
            "description": "Time that the report was submitted to be processed."
          },
          "completed_at": {
            "type": "string",
            "format": "DateTime",
            "description": "Time the report was completed."
          },
          "created_at": {
            "type": "string",
            "format": "DateTime",
            "description": "Time the report was created."
          },
          "updated_at": {
            "type": "string",
            "format": "DateTime",
            "description": "Time the report was updated."
          },
          "candidate": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "UUID",
                "description": "Unique identifier for the candidate."
              },
              "full_name": {
                "type": "string",
                "description": "Full name of the candidate."
              },
              "meta": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CandidateMeta"
                  }
                ]
              }
            }
          },
          "adverse_action_id": {
            "type": "string"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReportMeta"
              }
            ]
          }
        }
      },
      "AccountCustomFields": {
        "type": "object",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResourceId"
              }
            ],
            "description": "The custom field identifier."
          },
          "name": {
            "type": "string",
            "description": "The name of the custom field."
          },
          "label": {
            "type": "string",
            "description": "The label of the custom field."
          },
          "description": {
            "type": "string",
            "description": "The description of the custom field."
          },
          "value": {
            "type": "string",
            "description": "The data of the custom field."
          },
          "custom_field_type": {
            "type": "string",
            "description": "The data type of a custom field",
            "enum": [
              "string",
              "date",
              "number",
              "boolean"
            ]
          },
          "resource": {
            "type": "string",
            "description": "Resource where this custom field will be available",
            "enum": [
              "Candidate"
            ]
          },
          "enabled": {
            "type": "boolean",
            "description": "Enable or disable a custom field"
          }
        }
      },
      "ConsentList": {
        "title": "ConsentList",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The Consent Unique ID.",
              "format": "UUID"
            },
            "name": {
              "type": "string",
              "description": "The name of the consent."
            },
            "title": {
              "type": "string",
              "description": "The title of the consent."
            },
            "url": {
              "type": "string",
              "description": "If available, the url of the consent."
            },
            "updated_at": {
              "type": "string",
              "description": "Timestamp of when the consent was last updated."
            },
            "text": {
              "type": "string",
              "description": "HTML base64 encoded text of the consent."
            }
          }
        }
      },
      "ReportCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "UUID",
            "description": "Unique identifier for the report."
          },
          "reference_id": {
            "type": "string",
            "nullable": true,
            "format": "UUID",
            "description": "Unique identifier for a reference to another attribute"
          },
          "candidate_id": {
            "type": "string",
            "format": "UUID",
            "description": "The candidate unique identifer."
          },
          "status": {
            "type": "string",
            "description": "Status of the report."
          },
          "response_status": {
            "type": "string",
            "nullable": true,
            "description": "Response status from Trua."
          },
          "adjudication": {
            "type": "string",
            "description": "The current status of an Adverse Action process."
          },
          "submitted_at": {
            "type": "string",
            "format": "DateTime",
            "description": "Time the report was submitted.",
            "nullable": true
          },
          "completed_at": {
            "type": "string",
            "nullable": true,
            "description": "Time the report was completed.",
            "format": "DateTime"
          },
          "created_at": {
            "type": "string",
            "description": "Time the report was created.",
            "format": "DateTime"
          },
          "updated_at": {
            "type": "string",
            "description": "Time the report was updated.",
            "format": "DateTime"
          },
          "decision": {
            "type": "string",
            "description": "Decision made on the report."
          },
          "usage_amount": {
            "type": "integer",
            "description": "Cost of the report."
          },
          "process_sequentially": {
            "type": "boolean",
            "description": "True if the reports are done one after another. False if they are all sent at the same time."
          },
          "permissible_purpose": {
            "type": "string",
            "description": "Identifies the reason a report was submitted, and what the results may be used for."
          },
          "created_by": {
            "type": "string",
            "format": "DateTime",
            "description": "Who created the report."
          },
          "candidate": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "UUID",
                "description": "Unique identifier for the candidate."
              },
              "full_name": {
                "type": "string",
                "description": "Full name of the candidate."
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "Email address."
              },
              "phone_masked": {
                "type": "string",
                "format": "phone number",
                "description": "Phone number."
              },
              "date_of_birth_masked_maked": {
                "type": "string",
                "description": "Masked date of birth.",
                "nullable": true
              },
              "ssn_masked": {
                "type": "string",
                "description": "Masked social security number.",
                "nullable": true
              },
              "drivers_licence_number_masked": {
                "type": "string",
                "description": "Masked drivers licence number.",
                "nullable": true
              },
              "full_address": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "nullable": true
                  },
                  "zip_code": {
                    "type": "string",
                    "nullable": true
                  },
                  "city": {
                    "type": "string",
                    "nullable": true
                  },
                  "state": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "additional_date": {
                "type": "object",
                "description": "Additional data for the candidate."
              }
            }
          },
          "account_id": {
            "type": "string",
            "format": "UUID",
            "description": "Unique identifier of the account that was used."
          },
          "account_name": {
            "type": "string",
            "description": "Name of the account."
          },
          "report_url": {
            "type": "string",
            "nullable": true,
            "description": "URL of the report."
          },
          "adverse_action_id": {
            "type": "string",
            "nullable": true,
            "description": "Unique identifier of an Adverse Action, if one were taken.",
            "format": "UUID"
          },
          "report_screenings": {
            "type": "array",
            "description": "An array of screenings being used in this report.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique identifier of the Report Screening."
                },
                "type": {
                  "type": "string",
                  "description": "The type of the Report Screening. E.g. Criminal."
                },
                "label": {
                  "type": "string",
                  "description": "Friendly name of the Report Screening."
                },
                "name": {
                  "type": "string",
                  "description": "Internal name of the Report Screening."
                },
                "status": {
                  "type": "string",
                  "description": "Status of the Report Screening."
                },
                "records": {
                  "type": "array",
                  "description": "An array of records found for the Report Screening.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "object",
                        "description": "Details about the main category of the Report Screening."
                      },
                      "messages": {
                        "type": "array",
                        "description": "Messages returned from our providers.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "violations": {
                        "type": "array",
                        "description": "An array of violations found for the screening.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string",
                              "description": "The description of the violation."
                            },
                            "disposition": {
                              "type": "string",
                              "description": "Information about the disposition. Not all violations will have this."
                            },
                            "disposition_date": {
                              "type": "string",
                              "description": "The disposition date. Not all violations will have this."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "elapsed_timing": {
            "type": "string",
            "description": "Time passed since created."
          },
          "package_name": {
            "type": "string",
            "description": "Name of the package."
          },
          "comments": {
            "type": "array",
            "description": "An array of comments made by the verification team.",
            "items": {
              "type": "string"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReportMeta"
              }
            ]
          },
          "adverse_action_settings": {
            "type": "object",
            "properties": {
              "mandatory_selection_of_violations": {
                "type": "boolean",
                "description": "In case of creation of a Adverse Action, the parameter `violations` will be required if this is true.<br/> For more details, see the [Adverse Action](#section/Report-Lifecycle/Adverse-Action) section."
              }
            }
          }
        }
      },
      "AdverseAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "UUID",
            "description": "Unique ID for the Adverse Action."
          },
          "status": {
            "type": "string",
            "description": "Status of the Adverse Action."
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "Currently unused."
          },
          "text": {
            "type": "string",
            "nullable": true,
            "description": "Currently unused."
          },
          "expires_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "DateTime",
            "description": "Timestamp of when the Adverse Action was created."
          },
          "updated_at": {
            "type": "string",
            "nullable": true,
            "description": "Timestamp of when the Adverse Actions was last updated."
          },
          "violations": {
            "type": "array",
            "description": "An array of reasons selected for this Adverse Action.",
            "items": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "Description of the violation selected."
                },
                "sentence": {
                  "type": "string",
                  "description": "The sentence for the violation."
                },
                "file_date": {
                  "type": "string",
                  "format": "Date",
                  "description": "Date of the filing."
                },
                "offense_date": {
                  "type": "string",
                  "nullable": true,
                  "description": "Date of the offense."
                },
                "dispositon_date": {
                  "type": "string",
                  "description": "Date of the disposition."
                },
                "dob_on_record": {
                  "type": "string",
                  "description": "Date of birth on record (masked)"
                },
                "jurisdiction": {
                  "type": "string",
                  "description": "Where the violation occured."
                },
                "name_on_record": {
                  "type": "string",
                  "description": "Name on record for this violation."
                }
              }
            }
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "UUID",
                  "description": "Unique ID for the comment."
                },
                "title": {
                  "type": "string",
                  "description": "Title for the comment."
                },
                "text": {
                  "type": "string",
                  "description": "Full text of the comment."
                },
                "created_at": {
                  "type": "string",
                  "format": "DateTime",
                  "description": "Timestamp of when the comment was made."
                },
                "update_at": {
                  "type": "string",
                  "nullable": true,
                  "description": "Timestamp of when the comment was last updated.",
                  "format": "DateTime"
                }
              }
            },
            "description": "An array of comments made by our verification team on the report."
          },
          "applicant_first_name": {
            "type": "string",
            "description": "Name of the candidate."
          },
          "account_name": {
            "type": "string",
            "description": "Name of the account."
          },
          "logo": {
            "type": "string",
            "description": "Logo of the company."
          },
          "styles": {
            "type": "object",
            "description": "Style elements for the account."
          }
        }
      },
      "AccountMeta": {
        "type": "object",
        "description": "Relevant links for an account.",
        "properties": {
          "entity": {
            "type": "string",
            "description": "Link to API resource."
          }
        }
      },
      "Account": {
        "title": "Account",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for the account.",
            "type": "string",
            "format": "uuid",
            "maxLength": 50
          },
          "account_name": {
            "type": "string",
            "description": "Name of the account."
          },
          "first_name": {
            "type": "string",
            "description": "First name of the account owner."
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the account owner."
          },
          "email_address": {
            "type": "string",
            "format": "email",
            "description": "Account owner email address. Must be an existing user."
          },
          "url": {
            "type": "string",
            "format": "url",
            "description": "The company's website address."
          },
          "tech_email_address": {
            "type": "string",
            "format": "email",
            "description": "Technical support email."
          },
          "support_email_address": {
            "type": "string",
            "format": "email",
            "description": "Support email."
          },
          "support_phone": {
            "type": "string",
            "format": "phone number",
            "description": "Support phone number."
          },
          "compliance_email_address": {
            "type": "string",
            "format": "email",
            "description": "Compliance support email."
          },
          "actions_email_address": {
            "type": "string",
            "format": "email",
            "description": "Actions support email."
          },
          "configurations": {
            "type": "object",
            "properties": {
              "client_app": {
                "type": "object",
                "properties": {
                  "disable_invite_button": {
                    "type": "boolean",
                    "description": "True if the invite button is not visible in the UI to the account user."
                  }
                }
              },
              "sub_accounts": {
                "type": "object",
                "properties": {
                  "receive_webhooks": {
                    "type": "boolean",
                    "description": "True if Subaccounts will be able to trigger webhook notifications to the Parent account."
                  }
                }
              },
              "managed_adverse_action": {
                "type": "string",
                "format": "boolean",
                "description": "True if a Trua specialist will be able to create and cancel Adverse Actions."
              },
              "allow_candidate_consented": {
                "type": "string",
                "format": "boolean",
                "description": "True if the account would like to have the option of asserting that they have collected the needed background check consent documents for a candidate. The result is that when a candidate with all required fields is provided by the account (via mass upload or API) and a 'consented' flag is passed in, the report can be immediately run, and no other consent documents are required to be collected."
              }
            }
          },
          "features": {
            "type": "object",
            "properties": {
              "view:reports": {
                "type": "boolean",
                "description": ""
              },
              "create:reports": {
                "type": "boolean",
                "description": ""
              },
              "view:candidates": {
                "type": "boolean",
                "description": ""
              },
              "view:invitations": {
                "type": "boolean",
                "description": ""
              },
              "create:api_tokens": {
                "type": "boolean",
                "description": ""
              },
              "create:candidates": {
                "type": "boolean",
                "description": ""
              },
              "create:web_tokens": {
                "type": "boolean",
                "description": ""
              },
              "create:invitations": {
                "type": "boolean",
                "description": ""
              },
              "create:sub_accounts": {
                "type": "boolean",
                "description": ""
              },
              "create:account_webhooks": {
                "type": "boolean",
                "description": ""
              }
            }
          },
          "company_phone_number": {
            "type": "string"
          },
          "additional_company_info": {
            "type": "string"
          },
          "owner_title": {
            "type": "string",
            "description": "The title of the owner of the account."
          },
          "legal_business_name": {
            "type": "string",
            "description": "The account legal business name."
          },
          "state_of_incorporation": {
            "type": "string"
          },
          "ein": {
            "type": "string"
          },
          "legal_entity_type": {
            "type": "string",
            "description": "The type of the legal entity, valid options: `b-corporation`, `corporation`, `c-corporation`, `limited-liability-partnership`, `limited-liability-corporation`, `limited-partnership` and `non-profit`."
          },
          "billing_contact_first_name": {
            "type": "string",
            "description": "The first name of the billing contact."
          },
          "billing_contact_last_name": {
            "type": "string",
            "description": "The last name of the billing contact."
          },
          "billing_email": {
            "type": "string",
            "description": "The email of the billing contact."
          },
          "address": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "UUID",
                "description": "Unique identifier for the address."
              },
              "line1": {
                "type": "string",
                "description": "First line of the address."
              },
              "line2": {
                "type": "string",
                "description": "Second line of the address."
              },
              "city": {
                "type": "string",
                "description": "City of the address."
              },
              "state": {
                "type": "string",
                "description": "State of the address.",
                "maxLength": 2
              },
              "zip_code": {
                "type": "string",
                "description": "Zip code of the address.",
                "maxLength": 5
              },
              "current": {
                "type": "boolean",
                "description": "True if this is the current address."
              }
            }
          },
          "logo": {
            "type": "string",
            "description": "File location for logo image."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountMeta"
              }
            ]
          },
          "permissible_purposes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "UUID",
                  "description": "Unique identifier for the permissible purpose."
                },
                "name": {
                  "type": "string",
                  "description": "Name of the permissible purpose."
                },
                "default": {
                  "type": "string",
                  "format": "boolean",
                  "description": "True if this is the default permissible purpose."
                },
                "required_signed_documents": {
                  "type": "string",
                  "format": "boolean",
                  "description": "True if account needs to sign documents before credentialing."
                },
                "signed_documents": {
                  "type": "string",
                  "format": "boolean",
                  "description": "True if account has not signed required documents."
                }
              }
            }
          }
        }
      },
      "AccountList": {
        "title": "ListAccounts",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Account"
        },
        "x-examples": {
          "Example": [
            {
              "id": "fae63275-05d6-4bb7-aac7-b09ef1cb7fe2",
              "account_name": "Testing Account 2",
              "first_name": "Jaime",
              "last_name": "Giraldo",
              "email_address": "jaime.giraldo@bairesdev.com",
              "url": "",
              "tech_email_address": "",
              "support_email_address": "",
              "support_phone": "",
              "actions_email_address": "",
              "compliance_email_address": "",
              "logo": "/assets/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBDdz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--9171b6afec97fb15c2d350ec8a7c083df7bb8cc2/dummyCo-logo.png"
            },
            {
              "id": "f5e47d62-6be1-494c-bbdf-5ed01bae05b7",
              "account_name": "Sposmen's Account",
              "first_name": "Jaime",
              "last_name": "Giraldo",
              "email_address": "jaime.giraldo@bairesdev.com",
              "url": "",
              "tech_email_address": "",
              "support_email_address": "",
              "support_phone": "",
              "actions_email_address": "",
              "compliance_email_address": "",
              "logo": "/assets/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBEZz09IiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--a5ed5cdfbd09e9c161503824617d5f0825eea2f7/happiness%20reversed.png"
            }
          ]
        }
      },
      "Error": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "errors": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "APIKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the new API key.",
            "format": "UUID"
          },
          "api_token": {
            "type": "string",
            "description": "The new API key requested.",
            "format": "UUID"
          },
          "name": {
            "type": "string",
            "description": "The name of the API key.",
            "nullable": true
          },
          "header": {
            "type": "string",
            "description": "Authorization header that can be used with the new API key."
          }
        }
      },
      "SubaccountList": {
        "title": "ListSubaccounts",
        "type": "array",
        "items": {
          "title": "Account",
          "type": "object",
          "properties": {
            "id": {
              "description": "The account's unique identifier.",
              "type": "string",
              "format": "uuid",
              "maxLength": 50
            },
            "account_name": {
              "type": "string",
              "description": "Name of the subaccount."
            },
            "first_name": {
              "type": "string",
              "description": "First name of the account owner."
            },
            "last_name": {
              "type": "string",
              "description": "Last name of the owner."
            },
            "owner_email": {
              "type": "string",
              "format": "email",
              "description": "Owner's email address as text field."
            },
            "email_address": {
              "type": "string",
              "format": "email",
              "description": "Account owner email address, must be existing user."
            },
            "url": {
              "type": "string",
              "format": "url",
              "description": "The company's website address."
            },
            "tech_email_address": {
              "type": "string",
              "format": "email",
              "description": "Technical support email."
            },
            "support_email_address": {
              "type": "string",
              "format": "email",
              "description": "Support email."
            },
            "status": {
              "type": "string",
              "description": "The current status of the account. Could be `credentialed` or `pending`."
            }
          }
        }
      },
      "SubaccountCreated": {
        "title": "Subaccount",
        "type": "object",
        "properties": {
          "id": {
            "description": "Subaccount unique identifier.",
            "type": "string",
            "format": "uuid",
            "maxLength": 50
          },
          "account_name": {
            "type": "string",
            "description": "Name of the subaccount."
          },
          "first_name": {
            "type": "string",
            "description": "First name of the subaccount owner."
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the subaccount owner."
          },
          "owner_email": {
            "type": "string",
            "format": "email",
            "description": "Account owner's email address as a text field."
          },
          "email_address": {
            "type": "string",
            "format": "email",
            "description": "Account owner's email address, must be existing user."
          },
          "url": {
            "type": "string",
            "format": "url",
            "description": "The company's website address."
          },
          "tech_email_address": {
            "type": "string",
            "format": "email",
            "description": "Technical support email address."
          },
          "support_email_address": {
            "type": "string",
            "format": "email",
            "description": "Support email address."
          },
          "support_phone": {
            "type": "string",
            "format": "phone number",
            "description": "Support phone number."
          },
          "compliance_email_address": {
            "type": "string",
            "format": "email",
            "description": "Compliance support email address."
          },
          "actions_email_address": {
            "type": "string",
            "format": "email",
            "description": "Actions email address."
          },
          "address": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "UUID",
                "description": "Unique identifier for the address."
              },
              "line1": {
                "type": "string",
                "description": "First line of the address."
              },
              "line2": {
                "type": "string",
                "description": "Second line of the address."
              },
              "city": {
                "type": "string",
                "description": "City of the address."
              },
              "state": {
                "type": "string",
                "description": "State of the address.",
                "maxLength": 2
              },
              "zip_code": {
                "type": "string",
                "description": "Zip code of the address.",
                "maxLength": 5
              },
              "current": {
                "type": "boolean",
                "description": "True if this is the current address."
              }
            }
          },
          "logo": {
            "type": "string",
            "description": "File location for logo image."
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountMeta"
              }
            ]
          },
          "permissible_purposes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "UUID",
                  "description": "Unique identifier for the permissible purpose."
                },
                "name": {
                  "type": "string",
                  "description": "Name of the permissible purpose."
                },
                "default": {
                  "type": "string",
                  "format": "boolean",
                  "description": "True if it is the default permissible purpose."
                },
                "required_signed_documents": {
                  "type": "string",
                  "format": "boolean",
                  "description": "True if the account owner needs to sign documents before credentialing."
                },
                "signed_documents": {
                  "type": "string",
                  "format": "boolean",
                  "description": "True if the the required documents have not been signed."
                }
              }
            }
          },
          "api_tokens": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "UUID",
                  "description": "Unique identifier for the API token."
                },
                "name": {
                  "type": "string",
                  "description": "The name that was given to the API token."
                },
                "token": {
                  "type": "string",
                  "description": "The API token to be used for authentication. This token will only be visible right after creation, so we recommend saving it in a secure place.<br/><br/> With this token you will be able to create candidates, invitations, and reports on behalf of the subaccount, because this token belongs to the subaccount.<br/><br/> You will only be able to use this token after the subaccount has been credentialed by our onboarding specialists.<br/><br/> See the documention about [Credentialing the Subaccount](#section/Subaccounts/Credentialing-the-Subaccount) for more details."
                },
                "created_at": {
                  "type": "string",
                  "format": "DateTime",
                  "description": "Timestamp of when the API token was created."
                }
              }
            }
          }
        }
      },
      "AccountPackageList": {
        "title": "AccountPackageList",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The Account Package Unique ID used to order reports and invitations.",
              "format": "UUID"
            },
            "name": {
              "type": "string",
              "description": "Display name of the Account Package."
            },
            "package_id": {
              "type": "string",
              "description": "Reference ID to the parent package. Internal use.",
              "format": "UUID"
            },
            "package": {
              "type": "string",
              "description": "Name of the parent package. Internal use."
            },
            "package_system_name": {
              "type": "string",
              "description": "System name of the parent package. Internal use."
            },
            "action_type": {
              "type": "string",
              "description": "Describes what this package is used for. Can be `report` or `monitor`."
            },
            "account": {
              "type": "object",
              "description": "Account this package is associated with.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID for the account.",
                  "format": "UUID"
                },
                "account_name": {
                  "type": "string",
                  "description": "Account name."
                }
              }
            },
            "screenings": {
              "type": "array",
              "description": "An array of screenings associated with this package.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "UUID"
                  },
                  "name": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  },
                  "screening_type": {
                    "type": "string"
                  },
                  "intake_fields": {
                    "type": "array",
                    "description": "An array of intake fields associated with this screening that is essential for defining the data that must be collected from the candidate to properly run the report; if any required intake field is missing, the report cannot be executed.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "required": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            },
            "intake_fields": {
              "type": "array",
              "description": "An array of intake fields associated with this package that is essential for defining the data that must be collected from the candidate to properly run the report; if any required intake field is missing, the report cannot be executed.",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  },
                  "required": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKey": {
        "name": "Authorization",
        "type": "apiKey",
        "in": "header",
        "description": "**Header parameter example**: `Authorization: Account ${Trua_API_KEY}`"
      }
    },
    "parameters": {
      "Page": {
        "in": "query",
        "name": "page",
        "description": "The page number to retrieve.",
        "schema": {
          "type": "integer"
        }
      },
      "PerPage": {
        "in": "query",
        "name": "per_page",
        "description": "The maximum number of results per page.",
        "schema": {
          "type": "integer"
        }
      },
      "Query": {
        "in": "query",
        "name": "query",
        "description": "Filter listing results by a specific property.",
        "examples": {
          "report": {
            "value": {
              "query[created_at_gteq]": "2022-01-01T00:00:00.000Z"
            }
          }
        },
        "schema": {
          "type": "string"
        }
      },
      "OrderBy": {
        "in": "query",
        "name": "order_by",
        "description": "Order listing results by a specific property.",
        "examples": {
          "created_at": {
            "value": "created_at"
          }
        },
        "schema": {
          "type": "string"
        }
      },
      "Order": {
        "in": "query",
        "name": "order",
        "description": "Order listing results in ascending or descending order, when using `order_by`.</br> Accepted values are `asc` or `desc`. If not passed, defaults to ascending `asc`.",
        "examples": {
          "descending": {
            "value": "desc"
          }
        },
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Not Authenticated"
                  ]
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found"
      },
      "UnprocessableEntity": {
        "description": "Unprocessable Entity",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "A brief title of the error."
                },
                "detail": {
                  "type": "string",
                  "description": "Detailed message about the error."
                },
                "meta": {
                  "type": "object",
                  "description": "An object with more details about the response error."
                },
                "src": {
                  "type": "object",
                  "description": "An object containing references to the source of the error."
                },
                "status": {
                  "type": "integer",
                  "description": "Status code of the error."
                }
              }
            },
            "example": {
              "title": "Resource not updated",
              "detail": "There was a problem updating this resource.",
              "meta": {},
              "src": {},
              "status": 422
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "requestBodies": {
      "CandidateCreate": {
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CandidateCommon"
                },
                {
                  "type": "object",
                  "properties": {
                    "addresses": {
                      "type": "array",
                      "description": "The addresses of the candidate.",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Address"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "readOnly": true
                              }
                            }
                          }
                        ]
                      }
                    },
                    "custom_fields": {
                      "$ref": "#/components/schemas/CustomFieldsCreateOrUpdate"
                    }
                  }
                }
              ],
              "required": [
                "first_name",
                "last_name",
                "email"
              ]
            }
          }
        },
        "required": true
      },
      "CandidateUpdate": {
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CandidateCommon"
                },
                {
                  "type": "object",
                  "properties": {
                    "addresses": {
                      "type": "array",
                      "description": "The addresses of the candidate.",
                      "items": {
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The address identifier. Exclude if adding a new address."
                              },
                              "destroy": {
                                "type": "string",
                                "description": "Should the address be destroyed? Value of '1' destroys the address.",
                                "writeOnly": true,
                                "nullable": true,
                                "x-internal": false
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/Address"
                          }
                        ]
                      }
                    },
                    "custom_fields": {
                      "$ref": "#/components/schemas/CustomFieldsCreateOrUpdate"
                    }
                  }
                }
              ],
              "required": [
                "first_name",
                "last_name",
                "email"
              ]
            }
          }
        },
        "required": true
      },
      "create": {
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/create_structure"
                },
                {
                  "type": "object"
                }
              ]
            }
          }
        }
      },
      "InvitationCreate": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "account_package_id": {
                  "description": "Account package ID you want to use for this invitation.  Use `id` from [List Account Packages](#operation/getPackages)",
                  "type": "string",
                  "format": "uuid"
                },
                "candidate_id": {
                  "description": "ID of the candidate to invite.",
                  "type": "string",
                  "format": "uuid"
                },
                "expires_at": {
                  "description": "The date when the invitation should expire. If not provided, the expiration date will be calculated based on your account's notification settings.",
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "InvitationRefresh": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "expires_at": {
                  "type": "string",
                  "description": "The date when the invitation should expire.  If not provided, the expiration date will be calculated based on your account's notification settings.",
                  "x-internal": false,
                  "format": "date-time"
                }
              }
            }
          }
        },
        "required": false
      }
    },
    "examples": {
      "APIKeyExample": {
        "value": {
          "id": "70adc786-904b-4954-9adb-0ede9f949c62",
          "api_token": "c6b6e55f-5b3a-479a-9ea8-d95d13856c7d",
          "name": "Checking x",
          "header": "Authorization: User c6b6e55f-5b3a-479a-9ea8-d95d13856c7d"
        }
      },
      "AccountPackageListExample": {
        "value": [
          {
            "id": "6b9f20bf-f2ff-45a4-916a-4112f4502c72",
            "package_id": "04689d9c-a3c8-4b96-9662-53d972f14122",
            "package": "Gold Standard 2",
            "name": "test",
            "package_system_name": "covid_screening",
            "action_type": "monitor",
            "screenings": [
              {
                "id": "3957b063-dcc8-4745-8300-dbd01a76f65d",
                "name": "MVR",
                "label": "MVR",
                "screening_type": "MVR",
                "intake_fields": [
                  {
                    "name": "driver_license_number",
                    "type": "string",
                    "label": "Driver License Number",
                    "required": true
                  }
                ]
              }
            ],
            "intake_fields": [
              {
                "name": "first_name",
                "type": "string",
                "label": "First Name",
                "required": true
              },
              {
                "name": "middle_name",
                "type": "string",
                "label": "Last Name",
                "required": false
              },
              {
                "name": "last_name",
                "type": "string",
                "label": "Last Name",
                "required": true
              }
            ]
          },
          {
            "id": "835086c3-3a41-41a5-8b97-f3406c424d76",
            "package_id": "269a6069-5bd7-4b90-ae9b-ecdee7055daf",
            "package": "Basic",
            "name": "test",
            "package_system_name": "covid_screening",
            "action_type": "monitor",
            "screenings": [
              {
                "id": "3957b063-dcc8-4745-8300-dbd01a76f65d",
                "name": "CovidScreening",
                "label": "Covid Screening",
                "screening_type": "Certificate Verification",
                "intake_fields": [
                  {
                    "name": "certificate_number",
                    "type": "string",
                    "label": "Certificate Number",
                    "required": true
                  }
                ]
              }
            ],
            "intake_fields": [
              {
                "name": "first_name",
                "type": "string",
                "label": "First Name",
                "required": true
              },
              {
                "name": "middle_name",
                "type": "string",
                "label": "Last Name",
                "required": false
              },
              {
                "name": "last_name",
                "type": "string",
                "label": "Last Name",
                "required": true
              }
            ]
          }
        ]
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "Resources",
      "tags": [
        "Accounts",
        "Subaccounts",
        "Packages",
        "Account Custom Fields",
        "Candidates",
        "Consents",
        "Invitations",
        "Reports",
        "Adverse Actions",
        "Webhooks",
        "JWT"
      ]
    }
  ]
}